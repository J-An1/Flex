<?xml version="1.0" encoding="UTF-8"?><ResultsSession buildId="Default Project-2021-11-14" date="11/14/21 12:52:07" machine="BJL-3F-01" project="Default Project" tag="Example Configuration" time="2021-11-14T12:52:07+00:00" toolName="C++test" toolVer="2021.1.0.20210504B1389" user="686926">
   <TestConfig machine="BJL-3F-01" name="Example Configuration" pseudoUrl="c++test.user://Example Configuration" user="686926"/>
   <Authors/>
   <VersionInfos>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.execution" resultId="IExecutionViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.execution" resultId="InsureViolation" ver="3"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.scope" resultId="IScopeProjectInfo" ver="3"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricEstimationInfo" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.generation" resultId="IGenerationInfo" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.generation" resultId="IGenerationProjectInfo" ver="2"/>
   </VersionInfos>
   <mergePnt id="locationsDetails"/>
   <mergePnt id="executedTestsDetails"/>
   <Scope/>
   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:00">
      <Goal mode="1" name="Static"/>
      <Rules>
         <RulesList>
            <Rule cat="BD-API" desc="Do not pass negative values to functions expecting non-negative arguments" id="BD-API-NEGPARAM" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Always catch exceptions" id="BD-PB-EXCEPT" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid use before initialization" id="BD-PB-NOTINIT" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid null pointer dereferencing" id="BD-PB-NP" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid buffer overflow due to defining incorrect format limits" id="BD-PB-OVERFFMT" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid overflow due to reading a not zero terminated string" id="BD-PB-OVERFNZT" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid overflow when reading from a buffer" id="BD-PB-OVERFRD" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid overflow when writing to a buffer" id="BD-PB-OVERFWR" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid division by zero" id="BD-PB-ZERO" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid accessing arrays out of bounds" id="BD-PB-ARRAY" sev="2">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Avoid conditions that always evaluate to the same value" id="BD-PB-CC" sev="2">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Do not check for null after dereferencing" id="BD-PB-DEREF" sev="2">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Suspicious setting of stream flags" id="BD-PB-STREAMFLAGS" sev="3">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-PB" desc="Restore stream format" id="BD-PB-STREAMFMT" sev="3">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-RES" desc="Properly deallocate dynamically allocated resources" id="BD-RES-BADDEALLOC" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-RES" desc="Do not use resources that have been freed" id="BD-RES-FREE" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-RES" desc="Do not free resources using invalid pointers" id="BD-RES-INVFREE" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-RES" desc="Ensure resources are freed" id="BD-RES-LEAKS" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-TRS" desc="Avoid double locking" id="BD-TRS-DLOCK" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-TRS" desc="Avoid race conditions when using fork and file descriptors" id="BD-TRS-FORKFILE" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-TRS" desc="Do not abandon unreleased locks" id="BD-TRS-LOCK" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-TRS" desc="Do not acquire locks in different order" id="BD-TRS-ORDER" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-TRS" desc="Avoid race conditions while checking for the existence of a symbolic link" id="BD-TRS-SYMLINK" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="BD-TRS" desc="Do not use blocking functions while holding a lock" id="BD-TRS-TSHL" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="CDD" desc="Avoid function duplication" id="CDD-DUPM" sev="2">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="CODSTA" desc="Local variables should not use the same names as member variables" id="CODSTA-44" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="CODSTA" desc="Pointer should not be compared with NULL using relational operators &lt;, &gt;, &gt;=, &lt;=" id="CODSTA-147" sev="3">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="CODSTA" desc="Do not use string literals as operands of equality or relational operators" id="CODSTA-148" sev="3">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="CODSTA" desc="Avoid infinite loops" id="CODSTA-82" sev="3">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="CODSTA-CPP" desc="Constructors allowing for conversion should be made explicit" id="CODSTA-CPP-04" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="EXCEPT" desc="Throw by value, catch by reference" id="EXCEPT-02" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="EXCEPT" desc="Do not throw from within destructor" id="EXCEPT-03" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="INIT" desc="All member variables should be initialized in constructor" id="INIT-06" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="MISRA2004" desc="Floating-point expressions shall not be tested for equality or inequality" id="MISRA2004-13_3" sev="3">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="MISRA2004" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2004-16_8" sev="3">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="MISRA2004" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2004-17_6_a" sev="3">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="MRM" desc="Do not invoke malloc/realloc for objects having constructors" id="MRM-08" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="MRM" desc="Declare a copy assignment operator for classes with dynamically allocated memory" id="MRM-37" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="MRM" desc="Declare a copy constructor for classes with dynamically allocated memory" id="MRM-38" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="MRM" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="MRM-35" sev="3">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="MRM" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="MRM-36" sev="3">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="MRM" desc="Do not use 'delete' on pointers to a void type" id="MRM-51" sev="3">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="OOP" desc="Class cannot inherit other class more than once unless it is virtual inheritance" id="OOP-03" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="OOP" desc="Avoid calling virtual functions from constructors" id="OOP-16" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="OOP" desc="If a class has virtual functions it shall have a virtual destructor" id="OOP-23" sev="2">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="OPT" desc="Pass objects by reference instead of by value" id="OPT-14" sev="3">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="PB" desc="Do not call delete on non-pointers" id="PB-13" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="PB" desc="Properly terminate character strings" id="PB-21" sev="1">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="PB" desc="Do not cast from or to incomplete class at the point of casting" id="PB-54" sev="2">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="PB" desc="Do not delete objects with incomplete class at the point of deletion" id="PB-55" sev="2">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="PB" desc="Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants" id="PB-68" sev="2">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="PB" desc="Suspicious argument to malloc" id="PB-60" sev="3">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
            <Rule cat="PB" desc="Pointer arithmetic performed on freshly allocated memory" id="PB-61" sev="3">
               <Stats authTot="" authUrg="" total="0"/>
            </Rule>
         </RulesList>
         <CategoriesList>
            <Category desc="AUTOSAR C++14 Coding Guidelines" name="AUTOSAR" total="552">
               <Category desc="AUTOSAR A16-6-1 #error directive shall not be used" name="AUTOSAR-A16_6_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-3-1 All overloads of a function shall be visible from where it is called" name="AUTOSAR-A7_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M8-5-2 Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" name="AUTOSAR-M8_5_2" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A6-5-1 A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" name="AUTOSAR-A6_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A25-4-1 Ordering predicates used with associative containers and STL sorting and related algorithms shall adhere to a strict weak ordering relation" name="AUTOSAR-A25_4_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M15-1-1 The assignment-expression of a throw statement shall not itself cause an exception to be thrown" name="AUTOSAR-M15_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M15-1-3 An empty throw (throw;) shall only be used in the compound statement of a catch handler" name="AUTOSAR-M15_1_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M15-1-2 NULL shall not be thrown explicitly" name="AUTOSAR-M15_1_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-7-1 If the behavior of a user-defined special member function is identical to implicitly defined special member function, then it shall be defined &quot;=default&quot; or be left undefined" name="AUTOSAR-A12_7_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-3-2 The unary minus operator shall not be applied to an expression whose underlying type is unsigned" name="AUTOSAR-M5_3_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-3-1 Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" name="AUTOSAR-M5_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-3-4 Evaluation of the operand to the sizeof operator shall not contain side effects" name="AUTOSAR-M5_3_4" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-3-3 The unary &amp; operator shall not be overloaded" name="AUTOSAR-M5_3_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A13-5-2 All user-defined conversion operators shall be defined explicit" name="AUTOSAR-A13_5_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A13-5-3 User-defined conversion operators should not be used" name="AUTOSAR-A13_5_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A6-6-1 The goto statement shall not be used" name="AUTOSAR-A6_6_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M27-0-1 The stream input/output library &lt;cstdio&gt; shall not be used" name="AUTOSAR-M27_0_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A13-5-1 If &quot;operator[]&quot; is to be overloaded with a non-const version, const version shall also be implemented" name="AUTOSAR-A13_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-16-1 The ternary conditional operator shall not be used as a sub-expression" name="AUTOSAR-A5_16_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A13-5-4 If two opposite operators are defined, one shall be defined in terms of the other" name="AUTOSAR-A13_5_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A13-5-5 Comparison operators shall be non-member functions with identical parameter types and noexcept" name="AUTOSAR-A13_5_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A23-0-2 Elements of a container shall only be accessed via valid references, iterators, and pointers" name="AUTOSAR-A23_0_2" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-1-4 If a function exits with an exception, then before a throw, the function shall place all objects/resources that the function constructed in valid states or it shall delete them" name="AUTOSAR-A15_1_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A23-0-1 An iterator shall not be implicitly converted to const_iterator" name="AUTOSAR-A23_0_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M4-5-3 Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" name="AUTOSAR-M4_5_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-1-5 Exceptions shall not be thrown across execution boundaries" name="AUTOSAR-A15_1_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-17-1 The semantic equivalence between a binary operator and its assignment operator form shall be preserved" name="AUTOSAR-M5_17_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-1-2 An exception object shall not be a pointer" name="AUTOSAR-A15_1_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M4-5-1 Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" name="AUTOSAR-M4_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M0-1-10 Every defined function should be called at least once" name="AUTOSAR-M0_1_10" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-1-1 Only instances of types derived from std::exception shall be thrown" name="AUTOSAR-A15_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A10-4-1 Hierarchies should be based on interface classes" name="AUTOSAR-A10_4_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A16-7-1 The #pragma directive shall not be used" name="AUTOSAR-A16_7_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A11-0-1 A non-POD type should be defined as class" name="AUTOSAR-A11_0_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A11-0-2 A type defined as struct shall: (1) provide only public data members, (2) not provide any special member functions or methods, (3) not be a base of another struct or class, (4) not inherit from another struct or class" name="AUTOSAR-A11_0_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-2-3 Enumerations shall be declared as scoped enum classes" name="AUTOSAR-A7_2_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &amp;" name="AUTOSAR-M8_4_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-2-2 Enumeration underlying base type shall be explicitly defined" name="AUTOSAR-A7_2_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-2-1 An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" name="AUTOSAR-A7_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M8-4-2 The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" name="AUTOSAR-M8_4_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-7-1 The character \ shall not occur as a last character of a C++ comment" name="AUTOSAR-A2_7_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M3-9-1 The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" name="AUTOSAR-M3_9_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags" name="AUTOSAR-A2_7_3" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-7-2 Sections of code shall not be &quot;commented out&quot;" name="AUTOSAR-A2_7_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M12-1-1 An object's dynamic type shall not be used from the body of its constructor or destructor" name="AUTOSAR-M12_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M3-9-3 The underlying bit representations of floating-point values shall not be used" name="AUTOSAR-M3_9_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A1-1-1 All code shall conform to ISO/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" name="AUTOSAR-A1_1_1" total="11">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M3-1-2 Functions shall not be declared at block scope" name="AUTOSAR-M3_1_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A6-4-1 A switch statement shall have at least two case-clauses, distinct from the default label" name="AUTOSAR-A6_4_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-6-1 All class data members that are initialized by the constructor shall be initialized using member initializers" name="AUTOSAR-A12_6_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M15-0-3 Control shall not be transferred into a try or catch block using a goto or a switch statement" name="AUTOSAR-M15_0_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-2-6 A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" name="AUTOSAR-M5_2_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-2-9 A cast shall not convert a pointer type to an integral type" name="AUTOSAR-M5_2_9" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M14-5-3 A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" name="AUTOSAR-M14_5_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M18-2-1 The macro offsetof shall not be used" name="AUTOSAR-M18_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-2-8 An object with integer type or pointer to void type shall not be converted to an object with pointer type" name="AUTOSAR-M5_2_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-6-1 The right hand operand of the integer division or remainder operators shall not be equal to zero" name="AUTOSAR-A5_6_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-2-3 Casts from a base class to a derived class should not be performed on polymorphic types" name="AUTOSAR-M5_2_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-2-2 A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" name="AUTOSAR-M5_2_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A6-5-3 Do statements should not be used" name="AUTOSAR-A6_5_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A6-5-2 A for loop shall contain a single loop-counter which shall not have floating-point type" name="AUTOSAR-A6_5_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-13-5 Hexadecimal constants should be upper case" name="AUTOSAR-A2_13_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-13-6 Universal character names shall be used only inside character or string literals" name="AUTOSAR-A2_13_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A6-5-4 For-init-statement and expression should not perform actions other than loop-counter initialization and modification" name="AUTOSAR-A6_5_4" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-13-3 Type wchar_t shall not be used" name="AUTOSAR-A2_13_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-13-4 String literals shall not be assigned to non-constant pointers" name="AUTOSAR-A2_13_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-13-1 Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" name="AUTOSAR-A2_13_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-13-2 String literals with different encoding prefixes shall not be concatenated" name="AUTOSAR-A2_13_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-15 Array indexing shall be the only form of pointer arithmetic" name="AUTOSAR-M5_0_15" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-16 A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" name="AUTOSAR-M5_0_16" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-17 Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="AUTOSAR-M5_0_17" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-18 &gt;, &gt;=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" name="AUTOSAR-M5_0_18" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-0-2 At least the basic guarantee for exception safety shall be provided for all operations. In addition, each function may offer either the strong guarantee or the nothrow guarantee" name="AUTOSAR-A15_0_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M9-3-1 Const member functions shall not return non-const pointers or references to class-data" name="AUTOSAR-M9_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-10 If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" name="AUTOSAR-M5_0_10" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" name="AUTOSAR-M9_3_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-11 The plain char type shall only be used for the storage and use of character values" name="AUTOSAR-M5_0_11" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-12 Signed char and unsigned char type shall only be used for the storage and use of numeric values" name="AUTOSAR-M5_0_12" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-14 The first operand of a conditional-operator shall have type bool" name="AUTOSAR-M5_0_14" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified" name="AUTOSAR-M7_1_2" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-1-4 The register keyword shall not be used" name="AUTOSAR-A7_1_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-1-3 CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" name="AUTOSAR-A7_1_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-1-2 The constexpr specifier shall be used for values that can be determined at compile time" name="AUTOSAR-A7_1_2" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration" name="AUTOSAR-A7_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-8-1 A header file name shall be identical to a type name declared in it if it declares a type" name="AUTOSAR-A2_8_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-11-1 Volatile keyword shall not be used" name="AUTOSAR-A2_11_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A9-5-1 Unions shall not be used" name="AUTOSAR-A9_5_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement" name="AUTOSAR-M6_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-20 Non-constant operands to a binary bitwise operator shall have the same underlying type" name="AUTOSAR-M5_0_20" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-21 Bitwise operators shall only be applied to operands of unsigned underlying type" name="AUTOSAR-M5_0_21" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-0-1 The C library facilities shall only be accessed through C++ library headers" name="AUTOSAR-A18_0_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-0-3 The library &lt;clocale&gt; (locale.h) and the setlocale function shall not be used" name="AUTOSAR-A18_0_3" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M0-4-2 Use of floating-point arithmetic shall be documented" name="AUTOSAR-M0_4_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-0-2 The error state of a conversion from string to a numeric value shall be checked" name="AUTOSAR-A18_0_2" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A13-3-1 A function that contains &quot;forwarding reference&quot; as its argument shall not be overloaded" name="AUTOSAR-A13_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-5-1 A pointer to member shall not access non-existent class members" name="AUTOSAR-A5_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M14-6-1 In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-&gt;" name="AUTOSAR-M14_6_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A0-4-2 Type long double shall not be used" name="AUTOSAR-A0_4_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A0-4-4 Range, domain and pole errors shall be checked when using math functions" name="AUTOSAR-A0_4_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A4-7-1 An integer expression shall not lead to data loss" name="AUTOSAR-A4_7_1" total="8">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-2-5 Enumerations should be used to represent sets of related named constants" name="AUTOSAR-A7_2_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-2-4 In an enumeration, either (1) none, (2) the first or (3) all enumerators shall be initialized" name="AUTOSAR-A7_2_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A20-8-6 std::make_shared shall be used to construct objects owned by std::shared_ptr" name="AUTOSAR-A20_8_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A20-8-5 std::make_unique shall be used to construct objects owned by std::unique_ptr" name="AUTOSAR-A20_8_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A20-8-7 A std::weak_ptr shall be used to represent temporary shared ownership" name="AUTOSAR-A20_8_7" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A20-8-2 A std::unique_ptr shall be used to represent exclusive ownership" name="AUTOSAR-A20_8_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A20-8-1 An already-owned pointer value shall not be stored in an unrelated smart pointer" name="AUTOSAR-A20_8_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A20-8-4 A std::unique_ptr shall be used over std::shared_ptr if ownership sharing is not required" name="AUTOSAR-A20_8_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A20-8-3 A std::shared_ptr shall be used to represent shared ownership" name="AUTOSAR-A20_8_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A9-6-1 Data types used for interfacing with hardware or conforming to communication protocols shall be trivial, standard-layout and only contain members of types with defined sizes" name="AUTOSAR-A9_6_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-2-3 Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" name="AUTOSAR-M6_2_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-2-2 Floating-point expressions shall not be directly or indirectly tested for equality or inequality" name="AUTOSAR-M6_2_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-4-1 Destructor of a base class shall be public virtual, public override or protected non-virtual" name="AUTOSAR-A12_4_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-10-1 An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="AUTOSAR-A2_10_1" total="5">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-2-1 Assignment operators shall not be used in sub-expressions" name="AUTOSAR-M6_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A6-2-2 Expression statements shall not be explicit calls to constructors of temporary objects only" name="AUTOSAR-A6_2_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A6-2-1 Move and copy assignment operators shall either move or respectively copy base classes and data members of a class, without any side effects" name="AUTOSAR-A6_2_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A9-6-2 Bit-fields shall be used only when interfacing to hardware or conforming to communication protocols" name="AUTOSAR-A9_6_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-4-2 If a public destructor of a class is non-virtual, then the class should be declared final" name="AUTOSAR-A12_4_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-5-11 &quot;operator new&quot; and &quot;operator delete&quot; shall be defined together" name="AUTOSAR-A18_5_11" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-4-11 A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" name="AUTOSAR-A8_4_11" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-5-10 Placement new shall be used only with properly aligned pointers to sufficient storage capacity" name="AUTOSAR-A18_5_10" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-4-10 A parameter shall be passed by reference if it can't be NULL" name="AUTOSAR-A8_4_10" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-4-13 A std::shared_ptr shall be passed to a function as: (1) a copy to express the function shares ownership (2) an lvalue reference to express that the function replaces the managed object (3) a const lvalue reference to express that the function retains a reference count" name="AUTOSAR-A8_4_13" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-4-12 A std::unique_ptr shall be passed to a function as: (1) a copy to express the function assumes ownership (2) an lvalue reference to express that the function replaces the managed object" name="AUTOSAR-A8_4_12" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-1-2 The std::vector&lt;bool&gt; specialization shall not be used" name="AUTOSAR-A18_1_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-1-1 C-style arrays shall not be used" name="AUTOSAR-A18_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A13-2-1 An assignment operator shall return a reference to &quot;this&quot;" name="AUTOSAR-A13_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-1-4 A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" name="AUTOSAR-A18_1_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M18-0-3 The library functions abort, exit, getenv and system from library &lt;cstdlib&gt; shall not be used" name="AUTOSAR-M18_0_3" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A13-2-2 A binary arithmetic operator and a bitwise operator shall return a &quot;prvalue&quot;" name="AUTOSAR-A13_2_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-1-3 The std::auto_ptr type shall not be used" name="AUTOSAR-A18_1_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-1-6 All std::hash specializations for user-defined types shall have a noexcept function call operator" name="AUTOSAR-A18_1_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A13-2-3 A relational operator shall return a boolean value" name="AUTOSAR-A13_2_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M18-0-5 The unbounded functions of library &lt;cstring&gt; shall not be used" name="AUTOSAR-M18_0_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M18-0-4 The time handling functions of library &lt;ctime&gt; shall not be used" name="AUTOSAR-M18_0_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M2-10-1 Different identifiers shall be typographically unambiguous" name="AUTOSAR-M2_10_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-14-1 The right hand operand of a logical &amp;&amp;, || operators shall not contain side effects" name="AUTOSAR-M5_14_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-1-9 A class, structure, or enumeration shall not be declared in the definition of its type" name="AUTOSAR-A7_1_9" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-1-8 A non-type specifier shall be placed before a type specifier in a declaration" name="AUTOSAR-A7_1_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line" name="AUTOSAR-A7_1_7" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-1-6 The typedef specifier shall not be used" name="AUTOSAR-A7_1_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-1-5 The auto specifier shall not be used apart from following cases: (1) to declare that a variable has the same type as return type of a function call, (2) to declare that a variable has the same type as initializer of non-fundamental type, (3) to declare parameters of a generic lambda expression, (4) to declare a function template using trailing return type syntax" name="AUTOSAR-A7_1_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-9-2 Forwarding values to other functions shall be done via: (1) std::move if the value is an rvalue reference, (2) std::forward if the value is forwarding reference" name="AUTOSAR-A18_9_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-9-1 The std::bind shall not be used" name="AUTOSAR-A18_9_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-9-4 An argument to std::forward shall not be subsequently used" name="AUTOSAR-A18_9_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-9-3 The std::move shall not be used on objects declared const or const&amp;" name="AUTOSAR-A18_9_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A14-8-2 Explicit specializations of function templates shall not be used" name="AUTOSAR-A14_8_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A3-8-1 An object shall not be accessed outside of its lifetime" name="AUTOSAR-A3_8_1" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M16-3-2 The # and ## operators should not be used" name="AUTOSAR-M16_3_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-5-4 If a class has a user-declared constructor that takes a parameter of type std::initializer_list, then it shall be the only constructor apart from special member function constructors" name="AUTOSAR-A8_5_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M16-3-1 There shall be at most one occurrence of the # or ## operators in a single macro definition" name="AUTOSAR-M16_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M7-3-2 The identifier main shall not be used for a function other than the global function main" name="AUTOSAR-M7_3_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" name="AUTOSAR-M7_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A16-2-1 The ', &quot;, /*, //, \ characters shall not occur in a header file name or in #include directive" name="AUTOSAR-A16_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-5-1 In an initialization list, the order of initialization shall be following: (1) virtual base classes in depth and left to right order of the inheritance graph, (2) direct base classes in left to right order of inheritance list, (3) non-static data members in the order they were declared in the class definition" name="AUTOSAR-A8_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M7-3-4 Using-directives shall not be used" name="AUTOSAR-M7_3_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-5-0 All memory shall be initialized before it is read" name="AUTOSAR-A8_5_0" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M7-3-3 There shall be no unnamed namespaces in header files" name="AUTOSAR-M7_3_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-5-3 A variable of type auto shall not be initialized using {} or ={} braced-initialization" name="AUTOSAR-A8_5_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M7-3-6 Using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" name="AUTOSAR-M7_3_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A16-2-2 There shall be no unused include directives" name="AUTOSAR-A16_2_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization" name="AUTOSAR-A8_5_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A17-0-1 Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined" name="AUTOSAR-A17_0_1" total="5">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A9-3-1 Member functions shall not return non-const &quot;raw&quot; pointers or references to private or protected data owned by the class" name="AUTOSAR-A9_3_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-5-5 A loop-control-variable other than the loop-counter shall not be modified within condition or expression" name="AUTOSAR-M6_5_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-5-4 The loop-counter shall be modified by one of: --, ++, -= n, or += n; where n remains constant for the duration of the loop" name="AUTOSAR-M6_5_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M3-4-1 An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" name="AUTOSAR-M3_4_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-5-3 The loop-counter shall not be modified within condition or statement" name="AUTOSAR-M6_5_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, &gt; or &gt;=" name="AUTOSAR-M6_5_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-5-6 A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" name="AUTOSAR-M6_5_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A13-1-2 User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" name="AUTOSAR-A13_1_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M0-2-1 An object shall not be assigned to an overlapping object" name="AUTOSAR-M0_2_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M4-10-1 NULL shall not be used as an integer value" name="AUTOSAR-M4_10_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A13-1-3 User defined literals operators shall only perform conversion of passed parameters" name="AUTOSAR-A13_1_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-3-3 Pointers to incomplete class types shall not be deleted" name="AUTOSAR-A5_3_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-3-2 Null pointers shall not be dereferenced" name="AUTOSAR-A5_3_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-3-1 Evaluation of the operand to the typeid operator shall not contain side effects" name="AUTOSAR-A5_3_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M18-7-1 The signal handling facilities of &lt;csignal&gt; shall not be used" name="AUTOSAR-M18_7_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A26-5-1 Pseudorandom numbers shall not be generated using std::rand()" name="AUTOSAR-A26_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M4-10-2 Literal zero (0) shall not be used as the null-pointer-constant" name="AUTOSAR-M4_10_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-10-6 A class or enumeration name shall not be hidden by a variable, function or enumerator declaration in the same scope" name="AUTOSAR-A2_10_6" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A26-5-2 Random number engines shall not be default-initialized" name="AUTOSAR-A26_5_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-10-4 The identifier name of a non-member object with static storage duration or static function shall not be reused within a namespace" name="AUTOSAR-A2_10_4" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-10-5 An identifier name of a function with static storage duration or a non-member object with external or internal linkage should not be reused" name="AUTOSAR-A2_10_5" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A4-5-1 Expressions with type enum or enum class shall not be used as operands to built-in and overloaded operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary &amp; operator, and the relational operators &lt;, &lt;=, &gt;, &gt;=" name="AUTOSAR-A4_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" name="AUTOSAR-A15_5_3" total="11">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-5-2 Program shall not be abruptly terminated. In particular, an implicit or explicit invocation of std::abort(), std::quick_exit(), std::_Exit(), std::terminate() shall not be done" name="AUTOSAR-A15_5_2" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-5-1 All user-provided class destructors, deallocation functions, move constructors, move assignment operators and swap functions shall not exit with an exception. A noexcept exception specification shall be added to these functions as appropriate" name="AUTOSAR-A15_5_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M9-6-4 Named bit-fields with signed integer type shall have a length of more than one bit" name="AUTOSAR-M9_6_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-2-10 The increment (++) and decrement (--) operators shall not be mixed with other operators in an expression" name="AUTOSAR-M5_2_10" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-2-12 An identifier with array type passed as a function argument shall not decay to a pointer" name="AUTOSAR-M5_2_12" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-2-11 The comma operator, &amp;&amp; operator and the || operator shall not be overloaded" name="AUTOSAR-M5_2_11" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A14-7-2 Template specialization shall be declared in the same file (1) as the primary template (2) as a user-defined type, for which the specialization is declared" name="AUTOSAR-A14_7_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types" name="AUTOSAR-A3_9_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M16-2-3 Include guards shall be provided" name="AUTOSAR-M16_2_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A3-1-6 Trivial accessor and mutator functions should be inlined" name="AUTOSAR-A3_1_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A3-1-5 A function definition shall only be placed in a class definition if (1) the function is intended to be inlined (2) it is a member function template (3) it is a member function of a class template" name="AUTOSAR-A3_1_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A3-1-4 When an array with external linkage is declared, its size shall be stated explicitly" name="AUTOSAR-A3_1_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A3-1-3 Implementation files, that are defined locally in the project, should have a file name extension of &quot;.cpp&quot;" name="AUTOSAR-A3_1_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A3-1-2 Header files, that are defined locally in the project, shall have a file name extension of one of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" name="AUTOSAR-A3_1_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" name="AUTOSAR-A3_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-3-1 Only those characters specified in the C++ Language Standard basic source character set shall be used in the source code" name="AUTOSAR-A2_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M10-1-2 A base class shall only be declared virtual if it is used in a diamond hierarchy" name="AUTOSAR-M10_1_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M10-1-1 Classes should not be derived from virtual bases" name="AUTOSAR-M10_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" name="AUTOSAR-M8_0_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-4-2 All if ... else if constructs shall be terminated with an else clause" name="AUTOSAR-M6_4_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" name="AUTOSAR-M6_4_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A17-1-1 Use of the C Standard Library shall be encapsulated and isolated" name="AUTOSAR-A17_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A21-8-1 Arguments to character-handling functions shall be representable as an unsigned char" name="AUTOSAR-A21_8_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M10-1-3 An accessible base class shall not be both virtual and non-virtual in the same hierarchy" name="AUTOSAR-M10_1_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-4-6 The final clause of a switch statement shall be the default-clause" name="AUTOSAR-M6_4_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A25-1-1 Non-static data members or captured values of predicate function objects that are state related to this object's identity shall not be copied" name="AUTOSAR-A25_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause" name="AUTOSAR-M6_4_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-4-4 A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="AUTOSAR-M6_4_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-4-3 A switch statement shall be a well-formed switch statement" name="AUTOSAR-M6_4_3" total="5">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M2-7-1 The character sequence /* shall not be used within a C-style comment" name="AUTOSAR-M2_7_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-4-7 The condition of a switch statement shall not have bool type" name="AUTOSAR-M6_4_7" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-2-1 dynamic_cast should not be used" name="AUTOSAR-A5_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested" name="AUTOSAR-M0_3_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-2-5 An array or container shall not be accessed beyond its range" name="AUTOSAR-A5_2_5" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools/techniques; (b) dynamic analysis tools/techniques; (c) explicit coding of checks to handle run-time faults" name="AUTOSAR-M0_3_1" total="10">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-2-4 reinterpret_cast shall not be used" name="AUTOSAR-A5_2_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-2-3 A cast shall not remove any const or volatile qualification from the type of a pointer or reference" name="AUTOSAR-A5_2_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-2-2 Traditional C-style casts shall not be used" name="AUTOSAR-A5_2_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-4-5 Checked exceptions that could be thrown from a function shall be specified together with the function declaration and they shall be identical in all function declarations and for all its overriders" name="AUTOSAR-A15_4_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M17-0-2 The names of standard library macros and objects shall not be reused" name="AUTOSAR-M17_0_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-4-3 The noexcept specification of a function shall either be identical across all translation units, or identical or more restrictive between a virtual member function and an overrider" name="AUTOSAR-A15_4_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-4-4 A declaration of non-throwing function shall contain noexcept specification" name="AUTOSAR-A15_4_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M17-0-3 The names of standard library functions shall not be overridden" name="AUTOSAR-M17_0_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-4-1 Dynamic exception-specification shall not be used" name="AUTOSAR-A15_4_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-4-2 If a function is declared to be noexcept, noexcept(true) or noexcept(&lt;true condition&gt;), then it shall not exit with an exception" name="AUTOSAR-A15_4_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A10-1-1 Class shall not be derived from more than one base class which is not an interface class" name="AUTOSAR-A10_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M17-0-5 The setjmp macro and the longjmp function shall not be used" name="AUTOSAR-M17_0_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M16-1-2 All #else, #elif and #endif pre-processor directives shall reside in the same file as the #if or #ifdef directive to which they are related" name="AUTOSAR-M16_1_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A11-3-1 Friend declarations shall not be used" name="AUTOSAR-A11_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M16-1-1 The defined pre-processor operator shall only be used in one of the two standard forms" name="AUTOSAR-M16_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M7-5-2 The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" name="AUTOSAR-M7_5_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M7-5-1 A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" name="AUTOSAR-M7_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M3-2-4 An identifier with external linkage shall have exactly one definition" name="AUTOSAR-M3_2_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include" name="AUTOSAR-A16_0_1" total="5">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M10-2-1 All accessible entity names within a multiple inheritance hierarchy should be unique" name="AUTOSAR-M10_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M8-3-1 Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" name="AUTOSAR-M8_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-1-1 Constructors shall explicitly initialize all virtual base classes, all direct non-virtual base classes and all non-static data members" name="AUTOSAR-A12_1_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-1-2 Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type" name="AUTOSAR-A12_1_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M15-3-4 Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" name="AUTOSAR-M15_3_4" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-1-3 If all user-defined constructors of a class initialize data members with constant values that are the same across all constructors, then data members shall be initialized using NSDMI instead" name="AUTOSAR-A12_1_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M15-3-7 Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" name="AUTOSAR-M15_3_7" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-1-4 All constructors that are callable with a single argument of fundamental type shall be declared explicit" name="AUTOSAR-A12_1_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M15-3-6 Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" name="AUTOSAR-M15_3_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M3-2-1 All declarations of an object or function shall have compatible types" name="AUTOSAR-M3_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A17-6-1 Non-standard entities shall not be added to standard namespaces" name="AUTOSAR-A17_6_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file" name="AUTOSAR-M3_2_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-10-1 A pointer to member virtual function shall only be tested for equality with null-pointer-constant" name="AUTOSAR-A5_10_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M3-2-2 The One Definition Rule shall not be violated" name="AUTOSAR-M3_2_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-2-6 The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" name="AUTOSAR-A5_2_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-1-5 Common class initialization for non-constant members shall be done by a delegating constructor" name="AUTOSAR-A12_1_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M15-3-1 Exceptions shall be raised only after start-up and before termination" name="AUTOSAR-M15_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-1-6 Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" name="AUTOSAR-A12_1_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M15-3-3 Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" name="AUTOSAR-M15_3_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M11-0-1 Member data in non-POD class types shall be private" name="AUTOSAR-M11_0_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-1-2 Variables shall not be implicitly captured in a lambda expression" name="AUTOSAR-A5_1_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-1-1 Literal values shall not be used apart from type initialization, otherwise symbolic names shall be used instead" name="AUTOSAR-A5_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant" name="AUTOSAR-A4_10_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-1-6 Return type of a non-void return type lambda expression should be explicitly specified" name="AUTOSAR-A5_1_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-1-4 A lambda expression object shall not outlive any of its reference-captured objects" name="AUTOSAR-A5_1_4" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-1-3 Parameter list (possibly empty) shall be included in every lambda expression" name="AUTOSAR-A5_1_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-3-4 Catch-all (ellipsis and std::exception) handlers shall be used only in (a) main, (b) task main functions, (c) in functions that are supposed to isolate independent components and (d) when calling third-party code that uses exceptions not according to AUTOSAR C++14 guidelines" name="AUTOSAR-A15_3_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-3-5 A class type exception shall be caught by reference or const reference" name="AUTOSAR-A15_3_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-3-2 If a function throws an exception, it shall be handled when meaningful actions can be taken, otherwise it shall be propagated" name="AUTOSAR-A15_3_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M2-13-2 Octal constants (other than zero) and octal escape sequences (other than &quot;\0&quot; ) shall not be used" name="AUTOSAR-M2_13_2" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-3-3 Main function and a task main function shall catch at least: base class exceptions from all third-party libraries used, std::exception and all otherwise unhandled exceptions" name="AUTOSAR-A15_3_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-6-1 Functions declared with the [[noreturn]] attribute shall not return" name="AUTOSAR-A7_6_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M2-13-4 Literal suffixes shall be upper case" name="AUTOSAR-M2_13_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M2-13-3 A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" name="AUTOSAR-M2_13_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-19-1 Evaluation of constant unsigned integer expressions shall not lead to wrap-around" name="AUTOSAR-M5_19_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A14-5-1 A template constructor shall not participate in overload resolution for a single argument of the enclosing class type" name="AUTOSAR-A14_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A10-2-1 Non-virtual member functions shall not be redefined in derived classes" name="AUTOSAR-A10_2_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-2-1 When declaring function templates, the trailing return type syntax shall be used if the return type depends on the type of parameters" name="AUTOSAR-A8_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A14-5-3 A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations." name="AUTOSAR-A14_5_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-4-6 &quot;forward&quot; parameters declared as T &amp;&amp; shall always be forwarded" name="AUTOSAR-A8_4_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M16-0-5 Arguments to a function-like macro shall not contain tokens that look like pre-processing directives" name="AUTOSAR-M16_0_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-4-5 &quot;consume&quot; parameters declared as X &amp;&amp; shall always be moved from" name="AUTOSAR-A8_4_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-4-8 Output parameters shall not be used" name="AUTOSAR-A8_4_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M7-4-1 All usage of assembler shall be documented" name="AUTOSAR-M7_4_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-4-7 &quot;in&quot; parameters for &quot;cheap to copy&quot; types shall be passed by value" name="AUTOSAR-A8_4_7" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M16-0-2 Macros shall only be #define'd or #undef'd in the global namespace" name="AUTOSAR-M16_0_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-8-6 Copy and move constructors and copy assignment and move assignment operators shall be declared protected or defined &quot;=delete&quot; in base class" name="AUTOSAR-A12_8_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A3-3-2 Static and thread-local objects shall be constant-initialized" name="AUTOSAR-A3_3_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-4-2 All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="AUTOSAR-A8_4_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M16-0-1 #include directives in a file shall only be preceded by other pre-processor directives or comments" name="AUTOSAR-M16_0_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M7-4-3 Assembly language shall be encapsulated and isolated" name="AUTOSAR-M7_4_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-8-7 Assignment operators should be declared with the ref-qualifier &amp;" name="AUTOSAR-A12_8_7" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file" name="AUTOSAR-A3_3_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-4-1 Functions shall not be defined using the ellipsis notation" name="AUTOSAR-A8_4_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M7-4-2 Assembler instructions shall only be introduced using the asm declaration" name="AUTOSAR-M7_4_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-4-4 Multiple output values from a function should be returned as a struct or tuple" name="AUTOSAR-A8_4_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-4-3 Common ways of passing parameters should be used" name="AUTOSAR-A8_4_3" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-4-1 The asm declaration shall not be used" name="AUTOSAR-A7_4_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-5-1 Trigraphs shall not be used" name="AUTOSAR-A2_5_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A2-5-2 Digraphs shall not be used" name="AUTOSAR-A2_5_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A8-4-9 &quot;in-out&quot; parameters declared as T &amp; shall be modified" name="AUTOSAR-A8_4_9" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M16-0-8 If the # token appears as the first token on a line, then it shall be immediately followed by a pre-processing token" name="AUTOSAR-M16_0_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M16-0-7 Undefined macro identifiers shall not be used in #if or #elif pre-processor directives, except as operands to the defined operator" name="AUTOSAR-M16_0_7" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" name="AUTOSAR-M16_0_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-0-2 Bitwise operations and operations that assume data representation in memory shall not be performed on objects" name="AUTOSAR-A12_0_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M10-3-3 A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" name="AUTOSAR-M10_3_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-6-3 The continue statement shall only be used within a well-formed for loop" name="AUTOSAR-M6_6_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M3-3-2 If a function has internal linkage then all re-declarations shall include the static storage class specifier" name="AUTOSAR-M3_3_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-6-2 The goto statement shall jump to a label declared later in the same function body" name="AUTOSAR-M6_6_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-0-1 If a class declares a copy or move operation, or a destructor, either via &quot;=default&quot;, &quot;=delete&quot;, or via a user-provided declaration, then all others of these five special member functions shall be declared as well" name="AUTOSAR-A12_0_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M6-6-1 Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" name="AUTOSAR-M6_6_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-8-2 User-defined copy and move assignment operators should use user-defined no-throw swap function" name="AUTOSAR-A12_8_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-8-3 Moved-from object shall not be read-accessed" name="AUTOSAR-A12_8_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-8-4 Move constructor shall not initialize its class members and base classes using copy semantics" name="AUTOSAR-A12_8_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-1-8 Lambda expressions should not be defined inside another lambda expression" name="AUTOSAR-A5_1_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-8-5 A copy assignment and a move assignment operators shall handle self-assignment" name="AUTOSAR-A12_8_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-1-7 A lambda shall not be an operand to decltype or typeid" name="AUTOSAR-A5_1_7" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M19-3-1 The error indicator errno shall not be used" name="AUTOSAR-M19_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A12-8-1 Move and copy constructors shall move and respectively copy base classes and data members of a class, without any side effects" name="AUTOSAR-A12_8_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-0-3 The declaration of objects shall contain no more than two levels of pointer indirection" name="AUTOSAR-A5_0_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-9 An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" name="AUTOSAR-M5_0_9" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-8-1 The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" name="AUTOSAR-M5_8_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A0-1-1 A project shall not contain instances of non-volatile variables being given values that are not subsequently used" name="AUTOSAR-A0_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-0-2 The condition of an if-statement and the condition of an iteration statement shall have type bool" name="AUTOSAR-A5_0_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-8 An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" name="AUTOSAR-M5_0_8" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used" name="AUTOSAR-A0_1_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-0-1 The value of an expression shall be the same under any order of evaluation that the standard permits" name="AUTOSAR-A5_0_1" total="7">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use" name="AUTOSAR-M0_1_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A0-1-3 Every function defined in an anonymous namespace, or static function with internal linkage, or private member function shall be used" name="AUTOSAR-A0_1_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M0-1-2 A project shall not contain infeasible paths" name="AUTOSAR-M0_1_2" total="29">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-5 There shall be no implicit floating-integral conversions" name="AUTOSAR-M5_0_5" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A27-0-4 C-style strings shall not be used" name="AUTOSAR-A27_0_4" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M0-1-3 A project shall not contain unused variables" name="AUTOSAR-M0_1_3" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-4 An implicit integral conversion shall not change the signedness of the underlying type" name="AUTOSAR-M5_0_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-5-2 Non-placement new or delete expressions shall not be used" name="AUTOSAR-A18_5_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A27-0-3 Alternate input and output operations on a file stream shall not be used without an intervening flush or positioning call" name="AUTOSAR-A27_0_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-7 There shall be no explicit floating-integral conversions of a cvalue expression" name="AUTOSAR-M5_0_7" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-5-1 Functions malloc, calloc, realloc and free shall not be used" name="AUTOSAR-A18_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A27-0-2 A C-style string shall guarantee sufficient space for data and the null terminator" name="AUTOSAR-A27_0_2" total="5">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A5-0-4 Pointer arithmetic shall not be used with pointers to non-final classes" name="AUTOSAR-A5_0_4" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M0-1-1 A project shall not contain unreachable code" name="AUTOSAR-M0_1_1" total="7">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-6 An implicit integral or floating-point conversion shall not reduce the size of the underlying type" name="AUTOSAR-M5_0_6" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A13-6-1 Digit sequences separators ' shall only be used as follows: (1) for decimal, every 3 digits, (2) for hexadecimal, every 2 digits, (3) for binary, every 4 digits" name="AUTOSAR-A13_6_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A27-0-1 Inputs from independent components shall be validated" name="AUTOSAR-A27_0_1" total="8">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A0-1-4 There shall be no unused named parameters in non-virtual functions" name="AUTOSAR-A0_1_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A0-1-5 There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it" name="AUTOSAR-A0_1_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A0-1-6 There should be no unused type declarations" name="AUTOSAR-A0_1_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A10-3-5 A user-defined assignment operator shall not be virtual" name="AUTOSAR-A10_3_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A15-2-1 Constructors that are not noexcept shall not be invoked before program startup" name="AUTOSAR-A15_2_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-5-2 Functions shall not call themselves, either directly or indirectly" name="AUTOSAR-A7_5_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-18-1 The comma operator shall not be used" name="AUTOSAR-M5_18_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A7-5-1 A function shall not return a reference or a pointer to a parameter that is passed by reference to const" name="AUTOSAR-A7_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-5-4 If a project has sized or unsized version of operator &quot;delete&quot; globally defined, then both sized and unsized versions shall be defined" name="AUTOSAR-A18_5_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-5-3 The form of the delete expression shall match the form of the new expression used to allocate the memory" name="AUTOSAR-A18_5_3" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-3 A cvalue expression shall not be implicitly converted to a different underlying type" name="AUTOSAR-M5_0_3" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-5-5 Memory management functions shall ensure the following: (a) deterministic behavior resulting with the existence of worst-case execution time, (b) avoiding memory fragmentation, (c) avoid running out of memory, (d) avoiding mismatched allocations or deallocations, (e) no dependence on non-deterministic calls to kernel" name="AUTOSAR-A18_5_5" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M5-0-2 Limited dependence should be placed on C++ operator precedence rules in expressions" name="AUTOSAR-M5_0_2" total="6">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A10-3-1 Virtual function declaration shall contain exactly one of the three specifiers:" name="AUTOSAR-A10_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-5-8 Objects that do not outlive a function shall have automatic storage duration" name="AUTOSAR-A18_5_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A10-3-2 Each overriding virtual function shall be declared with the override or final specifier" name="AUTOSAR-A10_3_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A10-3-3 Virtual functions shall not be introduced in a final class" name="AUTOSAR-A10_3_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M0-1-8 All functions with void return type shall have external side effect(s)" name="AUTOSAR-M0_1_8" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR A18-5-9 Custom implementations of dynamic memory allocation and deallocation functions shall meet the semantic requirements specified in the corresponding &quot;Required behaviour&quot; clause from the C++ Standard" name="AUTOSAR-A18_5_9" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="AUTOSAR M0-1-9 There shall be no dead code" name="AUTOSAR-M0_1_9" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Flow Analysis" name="BD" total="118">
               <Category desc="Incorrect API usage" name="BD-API" total="6">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Miscellaneous" name="BD-MISC" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Possible Bugs" name="BD-PB" total="65">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Resources" name="BD-RES" total="8">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Security" name="BD-SECURITY" total="17">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Containers" name="BD-CO" total="5">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Threads &amp; Synchronization" name="BD-TRS" total="15">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Code Duplication Detection" name="CDD" total="8">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="SEI CERT C" name="CERT_C" total="362">
               <Category desc="CERT-MSC12_C (REC) Detect and remove code that has no effect or is never executed" name="CERT_C-MSC12" total="8">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC11_C (REC) Incorporate diagnostic tests using assertions" name="CERT_C-MSC11" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC14_C (REC) Do not introduce unnecessary platform dependencies" name="CERT_C-MSC14" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC13_C (REC) Detect and remove unused values" name="CERT_C-MSC13" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC15_C (REC) Do not depend on undefined behavior" name="CERT_C-MSC15" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-WIN00_C (REC) Be specific when dynamically loading libraries" name="CERT_C-WIN00" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FLP03_C (REC) Detect and handle floating-point errors" name="CERT_C-FLP03" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC17_C (REC) Finish every set of statements associated with a case label with a break statement" name="CERT_C-MSC17" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FLP02_C (REC) Avoid using floating-point numbers when precise computation is needed" name="CERT_C-FLP02" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC19_C (REC) For functions that return an array, prefer returning an empty array over a null value" name="CERT_C-MSC19" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FLP06_C (REC) Convert integers to floating point for floating-point operations" name="CERT_C-FLP06" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT02_C (REC) Understand integer conversion rules" name="CERT_C-INT02" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FLP00_C (REC) Understand the limitations of floating-point numbers" name="CERT_C-FLP00" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-API01_C (REC) Avoid laying out strings in memory directly before sensitive data" name="CERT_C-API01" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-API02_C (REC) Functions that read or write to or from an array should take an argument to specify the source or target size" name="CERT_C-API02" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT08_C (REC) Verify that all integer values are in range" name="CERT_C-INT08" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT09_C (REC) Ensure enumeration constants map to unique values" name="CERT_C-INT09" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT07_C (REC) Use only explicitly signed or unsigned char type for numeric values" name="CERT_C-INT07" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT04_C (REC) Enforce limits on integer values originating from tainted sources" name="CERT_C-INT04" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT05_C (REC) Do not use input functions to convert character data if they cannot handle all possible inputs" name="CERT_C-INT05" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ENV30_C (RULE) Do not modify the object referenced by the return value of certain functions" name="CERT_C-ENV30" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC22_C (REC) Use the setjmp(), longjmp() facility securely" name="CERT_C-MSC22" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC24_C (REC) Do not use deprecated or obsolescent functions" name="CERT_C-MSC24" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT13_C (REC) Use bitwise operators only on unsigned operands" name="CERT_C-INT13" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT12_C (REC) Do not make assumptions about the type of a plain int bit-field when used in an expression" name="CERT_C-INT12" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT10_C (REC) Do not assume a positive remainder when using the % operator" name="CERT_C-INT10" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ENV33_C (RULE) Do not call system()" name="CERT_C-ENV33" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ENV34_C (RULE) Do not store pointers returned by certain functions" name="CERT_C-ENV34" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT18_C (REC) Evaluate integer expressions in a larger size before comparing or assigning to that size" name="CERT_C-INT18" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ENV31_C (RULE) Do not rely on an environment pointer following an operation that may invalidate it" name="CERT_C-ENV31" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT15_C (REC) Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" name="CERT_C-INT15" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC30_C (RULE) Do not use the rand() function for generating pseudorandom numbers" name="CERT_C-MSC30" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ENV32_C (RULE) All exit handlers must return normally" name="CERT_C-ENV32" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT16_C (REC) Do not make assumptions about representation of signed integers" name="CERT_C-INT16" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction" name="CERT_C-MEM00" total="5">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM01_C (REC) Store a new value in pointers immediately after free()" name="CERT_C-MEM01" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-SIG30_C (RULE) Call only asynchronous-safe functions within signal handlers" name="CERT_C-SIG30" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM04_C (REC) Beware of zero-length allocations" name="CERT_C-MEM04" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM05_C (REC) Avoid large stack allocations" name="CERT_C-MEM05" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-SIG31_C (RULE) Do not access shared objects in signal handlers" name="CERT_C-SIG31" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM02_C (REC) Immediately cast the result of a memory allocation function call into a pointer to the allocated type" name="CERT_C-MEM02" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-SIG34_C (RULE) Do not call signal() from within interruptible signal handlers" name="CERT_C-SIG34" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-SIG35_C (RULE) Do not return from a computational exception signal handler" name="CERT_C-SIG35" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-PRE31_C (RULE) Avoid side effects in arguments to unsafe macros" name="CERT_C-PRE31" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-PRE32_C (RULE) Do not use preprocessor directives in invocations of function-like macros" name="CERT_C-PRE32" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-PRE30_C (RULE) Do not create a universal character name through concatenation" name="CERT_C-PRE30" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ENV02_C (REC) Beware of multiple environment variables with the same effective name" name="CERT_C-ENV02" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ENV01_C (REC) Do not make assumptions about the size of an environment variable" name="CERT_C-ENV01" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC01_C (REC) Strive for logical completeness" name="CERT_C-MSC01" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC04_C (REC) Use comments consistently and in a readable fashion" name="CERT_C-MSC04" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC07_C (REC) Detect and remove dead code" name="CERT_C-MSC07" total="8">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC09_C (REC) Character encoding: Use subset of ASCII for safety" name="CERT_C-MSC09" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT35_C (RULE) Use correct integer precisions" name="CERT_C-INT35" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT36_C (RULE) Converting a pointer to integer or integer to pointer" name="CERT_C-INT36" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT33_C (RULE) Ensure that division and remainder operations do not result in divide-by-zero errors" name="CERT_C-INT33" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT34_C (RULE) Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand" name="CERT_C-INT34" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" name="CERT_C-INT31" total="15">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT32_C (RULE) Ensure that operations on signed integers do not result in overflow" name="CERT_C-INT32" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT30_C (RULE) Ensure that unsigned integer operations do not wrap" name="CERT_C-INT30" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO34_C (RULE) Distinguish between characters read from a file and EOF or WEOF" name="CERT_C-FIO34" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO32_C (RULE) Do not perform operations on devices that are only appropriate for files" name="CERT_C-FIO32" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO38_C (RULE) Do not copy a FILE object" name="CERT_C-FIO38" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO39_C (RULE) Do not alternately input and output from a stream without an intervening flush or positioning call" name="CERT_C-FIO39" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO37_C (RULE) Do not assume that fgets() or fgetws() returns a nonempty string when successful" name="CERT_C-FIO37" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP44_C (RULE) Do not rely on side effects in operands to sizeof, _Alignof, or _Generic" name="CERT_C-EXP44" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP45_C (RULE) Do not perform assignments in selection statements" name="CERT_C-EXP45" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP42_C (RULE) Do not compare padding data" name="CERT_C-EXP42" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP43_C (RULE) Avoid undefined behavior when using restrict-qualified pointers" name="CERT_C-EXP43" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO30_C (RULE) Exclude user input from format strings" name="CERT_C-FIO30" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP46_C (RULE) Do not use a bitwise operator with a Boolean-like operand" name="CERT_C-EXP46" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP47_C (RULE) Do not call va_arg with an argument of the incorrect type" name="CERT_C-EXP47" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM12_C (REC) Consider using a goto chain when leaving a function on error when using and releasing resources" name="CERT_C-MEM12" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR34_C (RULE) Cast characters to unsigned char before converting to larger integer sizes" name="CERT_C-STR34" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR31_C (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" name="CERT_C-STR31" total="5">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR32_C (RULE) Do not pass a non-null-terminated character sequence to a library function that expects a string" name="CERT_C-STR32" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR30_C (RULE) Do not attempt to modify string literals" name="CERT_C-STR30" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO45_C (RULE) Avoid TOCTOU race conditions while accessing files" name="CERT_C-FIO45" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO46_C (RULE) Do not access a closed file" name="CERT_C-FIO46" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO44_C (RULE) Only use values for fsetpos() that are returned from fgetpos()" name="CERT_C-FIO44" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR37_C (RULE) Arguments to character-handling functions must be representable as an unsigned char" name="CERT_C-STR37" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR38_C (RULE) Do not confuse narrow and wide character strings and functions" name="CERT_C-STR38" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO47_C (RULE) Use valid format strings" name="CERT_C-FIO47" total="6">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO41_C (RULE) Do not call getc(), putc(), getwc(), or putwc() with a stream argument that has side effects" name="CERT_C-FIO41" total="5">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO42_C (RULE) Close files when they are no longer needed" name="CERT_C-FIO42" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO40_C (RULE) Reset strings on fgets() or fgetws() failure" name="CERT_C-FIO40" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM07_C (REC) Ensure that the arguments to calloc(), when multiplied, do not wrap" name="CERT_C-MEM07" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC32_C (RULE) Properly seed pseudorandom number generators" name="CERT_C-MSC32" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC33_C (RULE) Do not pass invalid data to the asctime() function" name="CERT_C-MSC33" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC38_C (RULE) Do not treat a predefined identifier as an object if it might only be implemented as a macro" name="CERT_C-MSC38" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC37_C (RULE) Ensure that control never reaches the end of a non-void function" name="CERT_C-MSC37" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC39_C (RULE) Do not call va_arg() on a va_list that has an indeterminate value" name="CERT_C-MSC39" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP30_C (RULE) Do not depend on the order of evaluation for side effects" name="CERT_C-EXP30" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON40_C (RULE) Do not refer to an atomic variable twice in an expression" name="CERT_C-CON40" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP20_C (REC) Perform explicit tests to determine success, true and false, and equality" name="CERT_C-EXP20" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON43_C (RULE) Do not allow data races in multithreaded code" name="CERT_C-CON43" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON41_C (RULE) Wrap functions that can fail spuriously in a loop" name="CERT_C-CON41" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC41_C (RULE) Never hard code sensitive information" name="CERT_C-MSC41" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC40_C (RULE) Do not violate constraints" name="CERT_C-MSC40" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM33_C (RULE) Allocate and copy structures containing a flexible array member dynamically" name="CERT_C-MEM33" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM34_C (RULE) Only free memory allocated dynamically" name="CERT_C-MEM34" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM31_C (RULE) Free dynamically allocated memory when no longer needed" name="CERT_C-MEM31" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM35_C (RULE) Allocate sufficient memory for an object" name="CERT_C-MEM35" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-SIG01_C (REC) Understand implementation-specific details regarding signal handler persistence" name="CERT_C-SIG01" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM36_C (RULE) Do not modify the alignment of objects by calling realloc()" name="CERT_C-MEM36" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-SIG00_C (REC) Mask signals handled by noninterruptible signal handlers" name="CERT_C-SIG00" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-API00_C (REC) Functions should validate their parameters" name="CERT_C-API00" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO24_C (REC) Do not open a file that is already open" name="CERT_C-FIO24" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-SIG02_C (REC) Avoid using signals to implement normal functionality" name="CERT_C-SIG02" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO21_C (REC) Do not create temporary files in shared directories" name="CERT_C-FIO21" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO22_C (REC) Close files before spawning processes" name="CERT_C-FIO22" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP40_C (RULE) Do not modify constant objects" name="CERT_C-EXP40" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM30_C (RULE) Do not access freed memory" name="CERT_C-MEM30" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP33_C (RULE) Do not read uninitialized memory" name="CERT_C-EXP33" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP34_C (RULE) Do not dereference null pointers" name="CERT_C-EXP34" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP32_C (RULE) Do not access a volatile object through a nonvolatile reference" name="CERT_C-EXP32" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON32_C (RULE) Prevent data races when accessing bit-fields from multiple threads" name="CERT_C-CON32" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP37_C (RULE) Call functions with the correct number and type of arguments" name="CERT_C-EXP37" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON33_C (RULE) Avoid race conditions when using library functions" name="CERT_C-CON33" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON30_C (RULE) Clean up thread-specific storage" name="CERT_C-CON30" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP35_C (RULE) Do not modify objects with temporary lifetime" name="CERT_C-EXP35" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON31_C (RULE) Do not destroy a mutex while it is locked" name="CERT_C-CON31" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP36_C (RULE) Do not cast pointers into more strictly aligned pointer types" name="CERT_C-EXP36" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON36_C (RULE) Wrap functions that can spuriously wake up in a loop" name="CERT_C-CON36" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON37_C (RULE) Do not call signal() in a multithreaded program" name="CERT_C-CON37" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON34_C (RULE) Declare objects shared between threads with appropriate storage durations" name="CERT_C-CON34" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type" name="CERT_C-EXP39" total="6">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON35_C (RULE) Avoid deadlock by locking in a predefined order" name="CERT_C-CON35" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON38_C (RULE) Preserve thread safety and liveness when using condition variables" name="CERT_C-CON38" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON39_C (RULE) Do not join or detach a thread that was previously joined or detached" name="CERT_C-CON39" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL22_C (REC) Use volatile for data that cannot be cached" name="CERT_C-DCL22" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL20_C (REC) Explicitly specify void when a function accepts no arguments" name="CERT_C-DCL20" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP00_C (REC) Use parentheses for precedence of operation" name="CERT_C-EXP00" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP05_C (REC) Do not cast away a const qualification" name="CERT_C-EXP05" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP02_C (REC) Be aware of the short-circuit behavior of the logical AND and OR operators" name="CERT_C-EXP02" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP08_C (REC) Ensure pointer arithmetic is used correctly" name="CERT_C-EXP08" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL19_C (REC) Minimize the scope of variables and functions" name="CERT_C-DCL19" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL18_C (REC) Do not begin integer constants with 0 when specifying a decimal value" name="CERT_C-DCL18" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL12_C (REC) Implement abstract data types using opaque types" name="CERT_C-DCL12" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO01_C (REC) Be careful using functions that use file names for identification" name="CERT_C-FIO01" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL11_C (REC) Understand the type issues associated with variadic functions" name="CERT_C-DCL11" total="6">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL10_C (REC) Maintain the contract between the writer and caller of variadic functions" name="CERT_C-DCL10" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL16_C (REC) Use &quot;L,&quot; not &quot;l,&quot; to indicate a long value" name="CERT_C-DCL16" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static" name="CERT_C-DCL15" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL13_C (REC) Declare function parameters that are pointers to values not changed by the function as const" name="CERT_C-DCL13" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP12_C (REC) Do not ignore values returned by functions" name="CERT_C-EXP12" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP10_C (REC) Do not depend on the order of evaluation of subexpressions or the order in which side effects take place" name="CERT_C-EXP10" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP15_C (REC) Do not place a semicolon on the same line as an if, for, or while statement" name="CERT_C-EXP15" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP16_C (REC) Do not compare function pointers to constant values" name="CERT_C-EXP16" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP14_C (REC) Beware of integer promotion when performing bitwise operations on integer types smaller than int" name="CERT_C-EXP14" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP19_C (REC) Use braces for the body of an if, for, or while statement" name="CERT_C-EXP19" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR00_C (REC) Represent characters using an appropriate type" name="CERT_C-STR00" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR09_C (REC) Don't assume numeric values for expressions with type plain character" name="CERT_C-STR09" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR07_C (REC) Use the bounds-checking interfaces for string manipulation" name="CERT_C-STR07" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR04_C (REC) Use plain char for characters in the basic character set" name="CERT_C-STR04" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR05_C (REC) Use pointers to const when referring to string literals" name="CERT_C-STR05" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR02_C (REC) Sanitize data passed to complex subsystems" name="CERT_C-STR02" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR03_C (REC) Do not inadvertently truncate a string" name="CERT_C-STR03" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL41_C (RULE) Do not declare variables inside a switch statement before the first case label" name="CERT_C-DCL41" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL40_C (RULE) Do not create incompatible declarations of the same function or object" name="CERT_C-DCL40" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON01_C (REC) Acquire and release synchronization primitives in the same module, at the same level of abstraction" name="CERT_C-CON01" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON02_C (REC) Do not use volatile as a synchronization primitive" name="CERT_C-CON02" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON05_C (REC) Do not perform operations that can block while holding a lock" name="CERT_C-CON05" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR11_C (REC) Do not specify the bound of a character array initialized with a string literal" name="CERT_C-STR11" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL39_C (RULE) Avoid information leakage when passing a structure across a trust boundary" name="CERT_C-DCL39" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR10_C (REC) Do not concatenate different type of string literals" name="CERT_C-STR10" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL31_C (RULE) Declare identifiers before using them" name="CERT_C-DCL31" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL38_C (RULE) Use the correct syntax when declaring a flexible array member" name="CERT_C-DCL38" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL37_C (RULE) Do not declare or define a reserved identifier" name="CERT_C-DCL37" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL36_C (RULE) Do not declare an identifier with conflicting linkage classifications" name="CERT_C-DCL36" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL30_C (RULE) Declare objects with appropriate storage durations" name="CERT_C-DCL30" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ARR01_C (REC) Do not apply the sizeof operator to a pointer when taking the size of an array" name="CERT_C-ARR01" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ARR02_C (REC) Explicitly specify array bounds, even if implicitly defined by an initializer" name="CERT_C-ARR02" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-PRE02_C (REC) Macro replacement lists should be parenthesized" name="CERT_C-PRE02" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros" name="CERT_C-PRE00" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-PRE01_C (REC) Use parentheses within macros around parameter names" name="CERT_C-PRE01" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-PRE06_C (REC) Enclose header files in an include guard" name="CERT_C-PRE06" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-PRE07_C (REC) Avoid using repeated question marks" name="CERT_C-PRE07" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS54_C (RULE) Detect and handle POSIX library errors" name="CERT_C-POS54" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR30_C (RULE) Set errno to zero before calling a library function known to set errno, and check errno only after the function returns a value indicating failure" name="CERT_C-ERR30" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR32_C (RULE) Do not rely on indeterminate values of errno" name="CERT_C-ERR32" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR33_C (RULE) Detect and handle standard library errors" name="CERT_C-ERR33" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR34_C (RULE) Detect errors when converting a string to a number" name="CERT_C-ERR34" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS51_C (RULE) Avoid deadlock with POSIX threads by locking in predefined order" name="CERT_C-POS51" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS50_C (RULE) Declare objects shared between POSIX threads with appropriate storage durations" name="CERT_C-POS50" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS53_C (RULE) Do not use more than one mutex for concurrent waiting operations on a condition variable" name="CERT_C-POS53" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS52_C (RULE) Do not perform operations that can block while holding a POSIX lock" name="CERT_C-POS52" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR06_C (REC) Understand the termination behavior of assert() and abort()" name="CERT_C-ERR06" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR07_C (REC) Prefer functions that support error checking over equivalent functions that don't" name="CERT_C-ERR07" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL06_C (REC) Use meaningful symbolic constants to represent literal values" name="CERT_C-DCL06" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL01_C (REC) Do not reuse variable names in subscopes" name="CERT_C-DCL01" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL00_C (REC) Const-qualify immutable objects" name="CERT_C-DCL00" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL05_C (REC) Use typedefs of non-pointer types only" name="CERT_C-DCL05" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL04_C (REC) Do not declare more than one variable per declaration" name="CERT_C-DCL04" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL02_C (REC) Use visually distinct identifiers" name="CERT_C-DCL02" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS44_C (RULE) Do not use signals to terminate threads" name="CERT_C-POS44" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS48_C (RULE) Do not unlock or destroy another POSIX thread's mutex" name="CERT_C-POS48" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS47_C (RULE) Do not use threads that can be canceled asynchronously" name="CERT_C-POS47" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS49_C (RULE) When data must be accessed by multiple threads, provide a mutex and guarantee no adjacent data is also accessed" name="CERT_C-POS49" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-WIN30_C (RULE) Properly pair allocation and deallocation functions" name="CERT_C-WIN30" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR01_C (REC) Use ferror() rather than errno to check for FILE stream errors" name="CERT_C-ERR01" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR02_C (REC) Avoid in-band error indicators" name="CERT_C-ERR02" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR04_C (REC) Choose an appropriate termination strategy" name="CERT_C-ERR04" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR05_C (REC) Application-independent code should provide error detection without dictating error handling" name="CERT_C-ERR05" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FLP37_C (RULE) Do not use object representations to compare floating-point values" name="CERT_C-FLP37" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FLP36_C (RULE) Preserve precision when converting integral values to floating-point type" name="CERT_C-FLP36" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FLP34_C (RULE) Ensure that floating-point conversions are within range of the new type" name="CERT_C-FLP34" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS33_C (RULE) Do not use vfork()" name="CERT_C-POS33" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ARR32_C (RULE) Ensure size arguments for variable length arrays are in a valid range" name="CERT_C-ARR32" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS35_C (RULE) Avoid race conditions while checking for the existence of a symbolic link" name="CERT_C-POS35" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS34_C (RULE) Do not call putenv() with a pointer to an automatic variable as the argument" name="CERT_C-POS34" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ARR30_C (RULE) Do not form or use out-of-bounds pointers or array subscripts" name="CERT_C-ARR30" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS37_C (RULE) Ensure that privilege relinquishment is successful" name="CERT_C-POS37" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FLP32_C (RULE) Prevent or detect domain and range errors in math functions" name="CERT_C-FLP32" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS36_C (RULE) Observe correct revocation order while relinquishing privileges" name="CERT_C-POS36" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS39_C (RULE) Use the correct byte ordering when transferring data between systems" name="CERT_C-POS39" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FLP30_C (RULE) Do not use floating-point variables as loop counters" name="CERT_C-FLP30" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS38_C (RULE) Beware of race conditions when using fork and file descriptors" name="CERT_C-POS38" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ARR39_C (RULE) Do not add or subtract a scaled integer to a pointer" name="CERT_C-ARR39" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ARR38_C (RULE) Guarantee that library functions do not form invalid pointers" name="CERT_C-ARR38" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ARR37_C (RULE) Do not add or subtract an integer to a pointer to a non-array object" name="CERT_C-ARR37" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ARR36_C (RULE) Do not subtract or compare two pointers that do not refer to the same array" name="CERT_C-ARR36" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-POS30_C (RULE) Use the readlink() function properly" name="CERT_C-POS30" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="SEI CERT C++" name="CERT_CPP" total="141">
               <Category desc="CERT-DCL55_CPP (RULE) Avoid information leakage when passing a class object across a trust boundary" name="CERT_CPP-DCL55" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR52_CPP (RULE) Do not use setjmp() or longjmp()" name="CERT_CPP-ERR52" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL56_CPP (RULE) Avoid cycles during initialization of static objects" name="CERT_CPP-DCL56" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR51_CPP (RULE) Handle all exceptions" name="CERT_CPP-ERR51" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON56_CPP (RULE) Do not speculatively lock a non-recursive mutex that is already owned by the calling thread" name="CERT_CPP-CON56" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL53_CPP (RULE) Do not write syntactically ambiguous declarations" name="CERT_CPP-DCL53" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" name="CERT_CPP-ERR50" total="14">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL54_CPP (RULE) Overload allocation and deallocation functions as a pair in the same scope" name="CERT_CPP-DCL54" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL59_CPP (RULE) Do not define an unnamed namespace in a header file" name="CERT_CPP-DCL59" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM51_CPP (RULE) Properly deallocate dynamically allocated resources" name="CERT_CPP-MEM51" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM52_CPP (RULE) Detect and handle memory allocation errors" name="CERT_CPP-MEM52" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL57_CPP (RULE) Do not let exceptions escape from destructors or deallocation functions" name="CERT_CPP-DCL57" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL58_CPP (RULE) Do not modify the standard namespaces" name="CERT_CPP-DCL58" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM50_CPP (RULE) Do not access freed memory" name="CERT_CPP-MEM50" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON50_CPP (RULE) Do not destroy a mutex while it is locked" name="CERT_CPP-CON50" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM55_CPP (RULE) Honor replacement dynamic storage management requirements" name="CERT_CPP-MEM55" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON51_CPP (RULE) Ensure actively held locks are released on exceptional conditions" name="CERT_CPP-CON51" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR59_CPP (RULE) Do not throw an exception across execution boundaries" name="CERT_CPP-ERR59" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM56_CPP (RULE) Do not store an already-owned pointer value in an unrelated smart pointer" name="CERT_CPP-MEM56" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR58_CPP (RULE) Handle all exceptions thrown before main() begins executing" name="CERT_CPP-ERR58" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM53_CPP (RULE) Explicitly construct and destruct objects when manually managing object lifetime" name="CERT_CPP-MEM53" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR57_CPP (RULE) Do not leak resources when handling exceptions" name="CERT_CPP-ERR57" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM54_CPP (RULE) Provide placement new with properly aligned pointers to sufficient storage capacity" name="CERT_CPP-MEM54" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON54_CPP (RULE) Wrap functions that can spuriously wake up in a loop" name="CERT_CPP-CON54" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR56_CPP (RULE) Guarantee exception safety" name="CERT_CPP-ERR56" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON55_CPP (RULE) Preserve thread safety and liveness when using condition variables" name="CERT_CPP-CON55" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR55_CPP (RULE) Honor exception specifications" name="CERT_CPP-ERR55" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON52_CPP (RULE) Prevent data races when accessing bit-fields from multiple threads" name="CERT_CPP-CON52" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR54_CPP (RULE) Catch handlers should order their parameter types from most derived to least derived" name="CERT_CPP-ERR54" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MEM57_CPP (RULE) Avoid using default operator new for over-aligned types" name="CERT_CPP-MEM57" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CON53_CPP (RULE) Avoid deadlock by locking in a predefined order" name="CERT_CPP-CON53" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR53_CPP (RULE) Do not reference base classes or class data members in a constructor or destructor function-try-block handler" name="CERT_CPP-ERR53" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR53_CPP (RULE) Range check element access" name="CERT_CPP-STR53" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL51_CPP (RULE) Do not declare or define a reserved identifier" name="CERT_CPP-DCL51" total="6">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR50_CPP (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" name="CERT_CPP-STR50" total="5">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL52_CPP (RULE) Never qualify a reference type with const or volatile" name="CERT_CPP-DCL52" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR52_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a basic_string" name="CERT_CPP-STR52" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL50_CPP (RULE) Do not define a C-style variadic function" name="CERT_CPP-DCL50" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-STR51_CPP (RULE) Do not attempt to create a std::string from a null pointer" name="CERT_CPP-STR51" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-OOP53_CPP (RULE) Write constructor member initializers in the canonical order" name="CERT_CPP-OOP53" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-OOP52_CPP (RULE) Do not delete a polymorphic object without a virtual destructor" name="CERT_CPP-OOP52" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-OOP51_CPP (RULE) Do not slice derived objects" name="CERT_CPP-OOP51" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-OOP50_CPP (RULE) Do not invoke virtual functions from constructors or destructors" name="CERT_CPP-OOP50" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-OOP57_CPP (RULE) Prefer special member functions and overloaded operators to C Standard Library functions" name="CERT_CPP-OOP57" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC50_CPP (RULE) Do not use std::rand() for generating pseudorandom numbers" name="CERT_CPP-MSC50" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-OOP56_CPP (RULE) Honor replacement handler requirements" name="CERT_CPP-OOP56" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC51_CPP (RULE) Ensure your random number generator is properly seeded" name="CERT_CPP-MSC51" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-OOP55_CPP (RULE) Do not use pointer-to-member operators to access nonexistent members" name="CERT_CPP-OOP55" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC52_CPP (RULE) Value-returning functions must return a value from all exit paths" name="CERT_CPP-MSC52" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-OOP54_CPP (RULE) Gracefully handle self-copy assignment" name="CERT_CPP-OOP54" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-OOP58_CPP (RULE) Copy operations must not mutate the source object" name="CERT_CPP-OOP58" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO51_CPP (RULE) Close files when they are no longer needed" name="CERT_CPP-FIO51" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-FIO50_CPP (RULE) Do not alternately input and output from a file stream without an intervening positioning call" name="CERT_CPP-FIO50" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-DCL60_CPP (RULE) Obey the one-definition rule" name="CERT_CPP-DCL60" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP55_CPP (RULE) Do not access a cv-qualified object through a cv-unqualified type" name="CERT_CPP-EXP55" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage" name="CERT_CPP-EXP56" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP53_CPP (RULE) Do not read uninitialized memory" name="CERT_CPP-EXP53" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP54_CPP (RULE) Do not access an object outside of its lifetime" name="CERT_CPP-EXP54" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP59_CPP (RULE) Use offsetof() on valid types and members" name="CERT_CPP-EXP59" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP57_CPP (RULE) Do not cast or delete pointers to incomplete classes" name="CERT_CPP-EXP57" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP58_CPP (RULE) Pass an object of the correct type to va_start" name="CERT_CPP-EXP58" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP62_CPP (RULE) Do not access the bits of an object representation that are not part of the object's value representation" name="CERT_CPP-EXP62" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP63_CPP (RULE) Do not rely on the value of a moved-from object" name="CERT_CPP-EXP63" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP60_CPP (RULE) Do not pass a nonstandard-layout type object across execution boundaries" name="CERT_CPP-EXP60" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP61_CPP (RULE) A lambda object must not outlive any of its reference captured objects" name="CERT_CPP-EXP61" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC53_CPP (RULE) Do not return from a function declared [[noreturn]]" name="CERT_CPP-MSC53" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-MSC54_CPP (RULE) A signal handler must be a plain old function" name="CERT_CPP-MSC54" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR62_CPP (RULE) Detect errors when converting a string to a number" name="CERT_CPP-ERR62" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR61_CPP (RULE) Catch exceptions by lvalue reference" name="CERT_CPP-ERR61" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-ERR60_CPP (RULE) Exception objects must be nothrow copy constructible" name="CERT_CPP-ERR60" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CTR57_CPP (RULE) Provide a valid ordering predicate" name="CERT_CPP-CTR57" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CTR58_CPP (RULE) Predicate function objects should not be mutable" name="CERT_CPP-CTR58" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CTR53_CPP (RULE) Use valid iterator ranges" name="CERT_CPP-CTR53" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CTR54_CPP (RULE) Do not subtract iterators that do not refer to the same container" name="CERT_CPP-CTR54" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CTR55_CPP (RULE) Do not use an additive operator on an iterator if the result would overflow" name="CERT_CPP-CTR55" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CTR56_CPP (RULE) Do not use pointer arithmetic on polymorphic objects" name="CERT_CPP-CTR56" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CTR50_CPP (RULE) Guarantee that container indices and iterators are within the valid range" name="CERT_CPP-CTR50" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CTR51_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a container" name="CERT_CPP-CTR51" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-CTR52_CPP (RULE) Guarantee that library functions do not overflow" name="CERT_CPP-CTR52" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-INT50_CPP (RULE) Do not cast to an out-of-range enumeration value" name="CERT_CPP-INT50" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP51_CPP (RULE) Do not delete an array through a pointer of the incorrect type" name="CERT_CPP-EXP51" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP52_CPP (RULE) Do not rely on side effects in unevaluated operands" name="CERT_CPP-EXP52" total="5">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CERT-EXP50_CPP (RULE) Do not depend on the order of evaluation for side effects" name="CERT_CPP-EXP50" total="6">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Coding Conventions" name="CODSTA" total="435">
               <Category desc="Coding Conventions for C++" name="CODSTA-CPP" total="109">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Coding Conventions for Modern C++" name="CODSTA-MCPP" total="67">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Comments" name="COMMENT" total="16">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Common Weakness Enumeration" name="CWE" total="81">
               <Category desc="CWE-532 Inclusion of Sensitive Information in Log Files" name="CWE-532" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-772 Missing Release of Resource after Effective Lifetime" name="CWE-772" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-476 NULL Pointer Dereference" name="CWE-476" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-770 Allocation of Resources Without Limits or Throttling" name="CWE-770" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-190 Integer Overflow or Wraparound" name="CWE-190" total="7">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" name="CWE-78" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-617 Reachable Assertion" name="CWE-617" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-835 Loop with Unreachable Exit Condition ('Infinite Loop')" name="CWE-835" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-415 Double Free" name="CWE-415" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" name="CWE-119" total="10">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-416 Use After Free" name="CWE-416" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-611 Improper Restriction of XML External Entity Reference" name="CWE-611" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-732 Incorrect Permission Assignment for Critical Resource" name="CWE-732" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-798 Use of Hard-coded Credentials" name="CWE-798" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-125 Out-of-bounds Read" name="CWE-125" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-400 Uncontrolled Resource Consumption" name="CWE-400" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-269 Improper Privilege Management" name="CWE-269" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-863 Incorrect Authorization" name="CWE-863" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-200 Information Exposure" name="CWE-200" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-287 Improper Authentication" name="CWE-287" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" name="CWE-362" total="5">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-20 Improper Input Validation" name="CWE-20" total="10">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" name="CWE-22" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" name="CWE-89" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-704 Incorrect Type Conversion or Cast" name="CWE-704" total="12">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-426 Untrusted Search Path" name="CWE-426" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-787 Out-of-bounds Write" name="CWE-787" total="6">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="CWE-326 Inadequate Encryption Strength" name="CWE-326" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Exceptions" name="EXCEPT" total="26">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Formatting" name="FORMAT" total="49">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Global Static Analysis" name="GLOBAL" total="20">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="High Integrity C++" name="HICPP" total="235">
               <Category desc="HIC++ 7.2.2 Initialize none, the first only or all enumerators in an enumeration" name="HICPP-7_2_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 2.1.1 Do not use tab characters in source files" name="HICPP-2_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 2.5.3 Use nullptr for the null pointer constant" name="HICPP-2_5_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 15.1.1 Only use instances of std::exception for exceptions" name="HICPP-15_1_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 2.5.2 Do not use octal constants (other than zero)" name="HICPP-2_5_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 2.5.1 Do not concatenate strings with different encoding prefixes" name="HICPP-2_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 12.4.4 Write members in an initialization list in the order in which they are declared" name="HICPP-12_4_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 7.2.1 Use an explicit enumeration base and ensure that it is large enough to store all enumerators" name="HICPP-7_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 12.4.5 Use delegating constructors to reduce code duplication" name="HICPP-12_4_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 3.3.1 Do not use variables with static storage duration" name="HICPP-3_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 17.5.1 Do not ignore the result of std::remove, std::remove if or std::unique" name="HICPP-17_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 13.2.5 Implement a minimal set of operators and use them to implement all other related operators" name="HICPP-13_2_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 4.1.1 Ensure that a function argument does not undergo an array-to-pointer conversion" name="HICPP-4_1_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 8.4.2 Ensure that a braced aggregate initializer matches the layout of the aggregate object" name="HICPP-8_4_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 8.4.1 Do not access an invalid object or an object with indeterminate value" name="HICPP-8_4_1" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 13.1.2 If a member of a set of callable functions includes a universal reference parameter, ensure that one appears in the same position for all other members" name="HICPP-13_1_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 18.3.1 Within the scope of a lock, ensure that no static path results in a lock of the same mutex" name="HICPP-18_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 18.3.2 Ensure that order of nesting of locks in a project forms a DAG" name="HICPP-18_3_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 18.3.5 Do not access the members of std::mutex directly" name="HICPP-18_3_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 18.3.6 Do not use relaxed atomics" name="HICPP-18_3_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.3.3 Ensure that the form of delete matches the form of new used to allocate the memory" name="HICPP-5_3_3" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 18.3.3 Do not use std::recursive mutex" name="HICPP-18_3_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.7.2 Ensure that a pointer to member that is a virtual function is only compared (==) with nullptr" name="HICPP-5_7_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 13.1.1 Ensure that all overloads of a function are visible from where it is called" name="HICPP-13_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 18.3.4 Only use std::unique lock when std::lock guard cannot be used" name="HICPP-18_3_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.7.1 Do not write code that expects floating point calculations to yield exact results" name="HICPP-5_7_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.3.2 Allocate memory using new and release it using delete" name="HICPP-5_3_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.3.1 Do not apply unary minus to operands of unsigned type" name="HICPP-5_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 9.2.1 Declare bit-fields with an explicitly unsigned integral or enumeration type" name="HICPP-9_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 12.3.1 Correctly declare overloads for operator new and delete" name="HICPP-12_3_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 6.1.4 Ensure that a switch statement has at least two case labels, distinct from the default label" name="HICPP-6_1_4" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 11.1.1 Declare all data members private" name="HICPP-11_1_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 6.1.3 Ensure that a non-empty case statement block does not fall through to the next label" name="HICPP-6_1_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 6.1.2 Explicitly cover all paths through multi-way selection statements" name="HICPP-6_1_2" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 6.1.1 Enclose the body of a selection or an iteration statement in a compound statement" name="HICPP-6_1_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 7.3.1 Do not use using directives" name="HICPP-7_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 15.2.1 Do not throw an exception from a destructor" name="HICPP-15_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 2.4.1 Ensure that each identifier is distinct from any other visible identifier" name="HICPP-2_4_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 12.5.7 Declare assignment operators with the ref-qualifier &amp;" name="HICPP-12_5_7" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 10.3.1 Ensure that a derived class has at most one base class which is not an interface class" name="HICPP-10_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 12.5.8 Make the copy assignment operator of an abstract class protected or define it =delete" name="HICPP-12_5_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 12.5.6 Use an atomic, non-throwing swap operation to implement the copy and move assignment operators" name="HICPP-12_5_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 12.5.3 Ensure that a user defined move/copy constructor only moves/copies base and member objects" name="HICPP-12_5_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 12.5.4 Declare noexcept the move constructor and move assignment operator" name="HICPP-12_5_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 8.1.1 Do not use multiple levels of pointer indirection" name="HICPP-8_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 3.2.1 Do not declare functions at block scope" name="HICPP-3_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 17.4.1 Use const container calls when result is immediately converted to a const iterator" name="HICPP-17_4_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 17.4.2 Use API calls that construct objects in place" name="HICPP-17_4_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 4.4.1 Do not convert floating values to integral types except through use of standard library functions" name="HICPP-4_4_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 13.2.1 Do not overload operators with special semantics" name="HICPP-13_2_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 18.2.2 Synchronize access to data shared between threads using a single lock" name="HICPP-18_2_2" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 13.2.2 Ensure that the return type of an overloaded binary operator matches the built-in counterparts" name="HICPP-13_2_2" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 18.2.3 Do not share volatile data between threads" name="HICPP-18_2_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 13.2.3 Declare binary arithmetic and bitwise operators as non-members" name="HICPP-13_2_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 13.2.4 When overloading the subscript operator (operator[]) implement both const and non-const versions" name="HICPP-13_2_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 18.2.1 Use high integrity::thread in place of std::thread" name="HICPP-18_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.6.1 Do not use bitwise operators with signed operands" name="HICPP-5_6_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 18.2.4 Use std::call_once rather than the Double-Checked Locking pattern" name="HICPP-18_2_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.2.1 Ensure that pointer or array access is demonstrably within bounds of a valid object" name="HICPP-5_2_1" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.2.2 Ensure that functions do not call themselves, either directly or indirectly" name="HICPP-5_2_2" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 12.4.2 Ensure that a constructor initializes explicitly all base classes and non-static data members" name="HICPP-12_4_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 12.4.3 Do not specify both an NSDMI and a member initializer in a constructor for the same non static member" name="HICPP-12_4_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 12.4.1 Do not use the dynamic type of an object unless the object is fully constructed" name="HICPP-12_4_1" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 6.4.1 Postpone variable definitions as long as possible" name="HICPP-6_4_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 15.3.2 Ensure that a program does not result in a call to std::terminate" name="HICPP-15_3_2" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" name="HICPP-16_1_1" total="9">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 16.1.2 Do not include a path specifier in filenames supplied in #include directives" name="HICPP-16_1_2" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 11.2.1 Do not use friend declarations" name="HICPP-11_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 2.3.1 Do not use the C comment delimiters /* ... */" name="HICPP-2_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 7.4.1 Ensure that any objects, functions or types to be used from a single translation unit are defined in an unnamed namespace in the main source file" name="HICPP-7_4_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 7.4.3 Ensure that an object or a function used from multiple translation units is declared in a single header file" name="HICPP-7_4_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 7.4.2 Ensure that an inline function, a function template, or a type used from multiple translation units is defined in a single header file" name="HICPP-7_4_2" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 16.1.5 Include directly the minimum number of headers required for compilation" name="HICPP-16_1_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 16.1.3 Match the filename in a #include directive to the one on the filesystem" name="HICPP-16_1_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 15.3.1 Do not access non-static members from a catch handler of constructor/destructor function try block" name="HICPP-15_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 16.1.4 Use &lt;&gt; brackets for system and standard library headers. Use quotes for all other headers" name="HICPP-16_1_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 2.3.2 Do not comment out code" name="HICPP-2_3_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 10.2.1 Use the override special identifier when overriding a virtual function" name="HICPP-10_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 17.3.4 Do not create smart pointers of array type" name="HICPP-17_3_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 17.3.5 Do not create an rvalue reference of std::array" name="HICPP-17_3_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 3.1.1 Do not hide declarations" name="HICPP-3_1_1" total="5">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 17.3.1 Do not use std::move on objects declared with const or const &amp; type" name="HICPP-17_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 14.1.1 Use variadic templates rather than an ellipsis" name="HICPP-14_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 17.3.2 Use std::forward to forward universal references" name="HICPP-17_3_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 17.3.3 Do not subsequently use the argument to std::forward" name="HICPP-17_3_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object" name="HICPP-3_5_1" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 4.3.1 Do not convert an expression of wider floating point type to a narrower floating point type" name="HICPP-4_3_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 7.1.10 Use static assert for assertions involving compile time constants" name="HICPP-7_1_10" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 8.2.4 Do not pass std::unique ptr by const reference" name="HICPP-8_2_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 8.2.3 Pass small objects with a trivial copy constructor by value" name="HICPP-8_2_3" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 8.2.2 Do not declare functions with an excessive number of parameters" name="HICPP-8_2_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 8.2.1 Make parameter names absent or identical in all declarations" name="HICPP-8_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 18.1.1 Do not use platform specific multi-threading facilities" name="HICPP-18_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.1.6 Do not code side effects into the right-hand operands of: &amp;&amp;, ||, sizeof, typeid or a function passed to condition variable::wait" name="HICPP-5_1_6" total="6">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.1.5 Include a (possibly empty) parameter list in every lambda expression" name="HICPP-5_1_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.5.1 Ensure that the right hand operand of the division or remainder operators is demonstrably non-zero" name="HICPP-5_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" name="HICPP-5_1_2" total="10">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.1.1 Use symbolic names instead of literal values in code" name="HICPP-5_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.1.4 Do not capture variables implicitly in a lambda" name="HICPP-5_1_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.1.3 Use parentheses in expressions to specify the intent of the expression" name="HICPP-5_1_3" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 12.5.1 Define explicitly =default or =delete implicit special member functions of concrete classes" name="HICPP-12_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 12.5.2 Define special members =default if the behavior is equivalent" name="HICPP-12_5_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 6.3.2 Ensure that execution of a function with a non-void return type ends in a return statement with a value" name="HICPP-6_3_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 12.1.1 Do not declare implicit user defined conversions" name="HICPP-12_1_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 1.2.1 Ensure that all statements are reachable" name="HICPP-1_2_1" total="10">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 1.2.2 Ensure that no expression or sub-expression is redundant" name="HICPP-1_2_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 6.3.1 Ensure that the label(s) for a jump statement or a switch condition appear later, in the same or an enclosing block" name="HICPP-6_3_1" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 7.1.4 Place CV-qualifiers on the right hand side of the type they apply to" name="HICPP-7_1_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 2.2.1 Do not use digraphs or trigraphs" name="HICPP-2_2_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 7.1.3 Do not place type specifiers before non-type specifiers in a declaration" name="HICPP-7_1_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types" name="HICPP-7_1_6" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 7.1.5 Do not inline large functions" name="HICPP-7_1_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 7.5.1 Do not use the asm declaration" name="HICPP-7_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 7.1.8 Use auto id = expr when declaring a variable to have the same type as its initializer function call" name="HICPP-7_1_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 7.1.7 Use a trailing return type in preference to type disambiguation using typename" name="HICPP-7_1_7" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 7.1.9 Do not explicitly specify the return type of a lambda" name="HICPP-7_1_9" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 10.1.1 Ensure that access to base class subobjects does not require explicit disambiguation" name="HICPP-10_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 7.1.2 Use const whenever possible" name="HICPP-7_1_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration" name="HICPP-7_1_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 14.2.2 Do not explicitly specialize a function template that is overloaded with other templates" name="HICPP-14_2_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 17.2.1 Wrap use of the C Standard Library" name="HICPP-17_2_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 3.4.1 Do not return a reference or a pointer to an automatic variable defined within the function" name="HICPP-3_4_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 14.2.3 Declare extern an explicitly instantiated template" name="HICPP-14_2_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 3.4.3 Use RAII for resources" name="HICPP-3_4_3" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 14.2.1 Declare template specializations in the same file as the primary template they specialize." name="HICPP-14_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 3.4.2 Do not assign the address of a variable to a pointer with a greater lifetime" name="HICPP-3_4_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 4.2.2 Ensure that data loss does not demonstrably occur in an integral expression" name="HICPP-4_2_2" total="6">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 4.2.1 Ensure that the U suffix is applied to a literal used in a context requiring an unsigned integral expression" name="HICPP-4_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 8.3.4 Define =delete functions with parameters of type rvalue reference to const" name="HICPP-8_3_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 8.3.3 Do not use default arguments" name="HICPP-8_3_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 8.3.1 Do not write functions with an excessive McCabe Cyclomatic Complexity" name="HICPP-8_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 18.4.1 Do not use std::condition variable any on a std::mutex" name="HICPP-18_4_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.4.3 Do not convert from a base class to a derived class" name="HICPP-5_4_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.4.2 Do not cast an expression to an enumeration type" name="HICPP-5_4_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.8.1 Do not use the conditional operator (?:) as a sub-expression" name="HICPP-5_8_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 5.4.1 Only use casting forms: static cast (excl. void*), dynamic cast or explicit constructor call" name="HICPP-5_4_1" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 9.1.5 Do not introduce virtual functions in a final class" name="HICPP-9_1_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 17.1.1 Do not use std::vector&lt;bool&gt;" name="HICPP-17_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 9.1.3 Do not return non-const handles to class data from const member functions" name="HICPP-9_1_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 9.1.4 Do not write member functions which return non-const handles to data less accessible than the member function" name="HICPP-9_1_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 9.1.1 Declare static any member function that does not require this. Alternatively, declare const any member function that does not modify the externally visible state of the object" name="HICPP-9_1_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 9.1.2 Make default arguments the same or absent when overriding a virtual function" name="HICPP-9_1_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 1.3.4 Do not use deprecated STL library features" name="HICPP-1_3_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 1.3.3 Do not use the C Standard Library .h headers" name="HICPP-1_3_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 6.2.4 Only modify a for loop counter in the for expression" name="HICPP-6_2_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 1.3.5 Do not use throw exception specifications" name="HICPP-1_3_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 6.2.3 Do not alter a control or counter variable more than once in a loop" name="HICPP-6_2_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 12.2.1 Declare virtual, private or protected the destructor of a type used as a base class" name="HICPP-12_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 1.3.2 Do not use the register keyword" name="HICPP-1_3_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 1.3.1 Do not use the increment operator (++) on a variable of type bool" name="HICPP-1_3_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 6.2.2 Ensure that a loop has a single loop counter, an optional control variable, and is not degenerate" name="HICPP-6_2_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="HIC++ 6.2.1 Implement a loop that only uses element values as a range-based loop" name="HICPP-6_2_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Initialization" name="INIT" total="20">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Joint Strike Fighter" name="JSF" total="278">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Metrics" name="METRICS" total="43">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="MISRA C 1998" name="MISRA" total="60">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="MISRA C 2004" name="MISRA2004" total="220">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="MISRA C++ 2008" name="MISRA2008" total="335">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="MISRA C 2012 (Legacy)" name="MISRA2012" total="349">
               <Category desc="MISRA C 2012 Rules" name="MISRA2012-RULE" total="306">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="MISRA C 2012 Directives" name="MISRA2012-DIR" total="43">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="MISRA C 2012" name="MISRAC2012" total="349">
               <Category desc="Rule 11.3 (Required) A cast shall not be performed between a pointer to object type and a pointer to a different object type" name="MISRAC2012-RULE_11_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 20.13 (Required) A line whose first token is # shall be a valid preprocessing directive" name="MISRAC2012-RULE_20_13" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 8.5 (Required) An external object or function shall be declared once in one and only one file" name="MISRAC2012-RULE_8_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 11.4 (Advisory) A conversion should not be performed between a pointer to object and an integer type" name="MISRAC2012-RULE_11_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 20.12 (Required) A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" name="MISRAC2012-RULE_20_12" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 8.6 (Required) An identifier with external linkage shall have exactly one external definition" name="MISRAC2012-RULE_8_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 11.5 (Advisory) A conversion should not be performed from pointer to void into pointer to object" name="MISRAC2012-RULE_11_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 15.1 (Advisory) The goto statement should not be used" name="MISRAC2012-RULE_15_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 20.11 (Required) A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" name="MISRAC2012-RULE_20_11" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 8.3 (Required) All declarations of an object or function shall use the same names and type qualifiers" name="MISRAC2012-RULE_8_3" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 11.6 (Required) A cast shall not be performed between pointer to void and an arithmetic type" name="MISRAC2012-RULE_11_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 15.2 (Required) The goto statement shall jump to a label declared later in the same function" name="MISRAC2012-RULE_15_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 20.10 (Advisory) The # and ## preprocessor operators should not be used" name="MISRAC2012-RULE_20_10" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 8.4 (Required) A compatible declaration shall be visible when an object or function with external linkage is defined" name="MISRAC2012-RULE_8_4" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 11.7 (Required) A cast shall not be performed between pointer to object and a non-integer arithmetic type" name="MISRAC2012-RULE_11_7" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 15.3 (Required) Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" name="MISRAC2012-RULE_15_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 8.9 (Advisory) An object should be defined at block scope if its identifier only appears in a single function" name="MISRAC2012-RULE_8_9" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 11.8 (Required) A cast shall not remove any const or volatile qualification from the type pointed to by a pointer" name="MISRAC2012-RULE_11_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 15.4 (Advisory) There should be no more than one break or goto statement used to terminate any iteration statement" name="MISRAC2012-RULE_15_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant" name="MISRAC2012-RULE_11_9" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 15.5 (Advisory) A function should have a single point of exit at the end" name="MISRAC2012-RULE_15_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 19.1 (Mandatory) An object shall not be assigned or copied to an overlapping object" name="MISRAC2012-RULE_19_1" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 8.7 (Advisory) Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" name="MISRAC2012-RULE_8_7" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 15.6 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" name="MISRAC2012-RULE_15_6" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 19.2 (Advisory) The union keyword should not be used" name="MISRAC2012-RULE_19_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 8.8 (Required) The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" name="MISRAC2012-RULE_8_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Dir 4.14 (Required) The validity of values received from external sources shall be checked" name="MISRAC2012-DIR_4_14" total="12">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 15.7 (Required) All if ... else if constructs shall be terminated with an else statement" name="MISRAC2012-RULE_15_7" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" name="MISRAC2012-DIR_4_13" total="6">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Dir 4.12 (Required) Dynamic memory allocation shall not be used" name="MISRAC2012-DIR_4_12" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Dir 4.11 (Required) The validity of values passed to library functions shall be checked" name="MISRAC2012-DIR_4_11" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Dir 4.10 (Required) Precautions shall be taken in order to prevent the contents of a header file being included more than once" name="MISRAC2012-DIR_4_10" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 20.14 (Required) All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" name="MISRAC2012-RULE_20_14" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 4.1 (Required) Octal and hexadecimal escape sequences shall be terminated" name="MISRAC2012-RULE_4_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 4.2 (Advisory) Trigraphs should not be used" name="MISRAC2012-RULE_4_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 8.1 (Required) Types shall be explicitly specified" name="MISRAC2012-RULE_8_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 8.2 (Required) Function types shall be in prototype form with named parameters" name="MISRAC2012-RULE_8_2" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 11.1 (Required) Conversions shall not be performed between a pointer to a function and any other type" name="MISRAC2012-RULE_11_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 11.2 (Required) Conversions shall not be performed between a pointer to an incomplete type and any other type" name="MISRAC2012-RULE_11_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 22.3 (Required) The same file shall not be open for read and write access at the same time on different streams" name="MISRAC2012-RULE_22_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 22.4 (Mandatory) There shall be no attempt to write to a stream which has been opened as read-only" name="MISRAC2012-RULE_22_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 22.5 (Mandatory) A pointer to a FILE object shall not be dereferenced" name="MISRAC2012-RULE_22_5" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 22.6 (Mandatory) The value of a pointer to a FILE shall not be used after the associated stream has been closed" name="MISRAC2012-RULE_22_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 22.7 (Required) The macro EOF shall only be compared with the unmodified return value from any Standard Library function capable of returning EOF" name="MISRAC2012-RULE_22_7" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 22.8 (Required) The value of errno shall be set to zero prior to a call to an errno-setting-function" name="MISRAC2012-RULE_22_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 22.9 (Required) The value of errno shall be tested against zero after calling an errno-setting-function" name="MISRAC2012-RULE_22_9" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 22.1 (Required) All resources obtained dynamically by means of Standard Library functions shall be explicitly released" name="MISRAC2012-RULE_22_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 22.2 (Mandatory) A block of memory shall only be freed if it was allocated by means of a" name="MISRAC2012-RULE_22_2" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 10.4 (Required) Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" name="MISRAC2012-RULE_10_4" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 10.5 (Advisory) The value of an expression should not be cast to an inappropriate essential type" name="MISRAC2012-RULE_10_5" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 14.1 (Required) A loop counter shall not have essentially floating type" name="MISRAC2012-RULE_14_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 10.6 (Required) The value of a composite expression shall not be assigned to an object with wider essential type" name="MISRAC2012-RULE_10_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 14.2 (Required) A for loop shall be well-formed" name="MISRAC2012-RULE_14_2" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 7.4 (Required) A string literal shall not be assigned to an object unless the object's type is &quot;pointer to const-qualified char&quot;" name="MISRAC2012-RULE_7_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 10.7 (Required) If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" name="MISRAC2012-RULE_10_7" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 14.3 (Required) Controlling expressions shall not be invariant" name="MISRAC2012-RULE_14_3" total="30">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 10.8 (Required) The value of a composite expression shall not be cast to a different essential type category or a wider essential type" name="MISRAC2012-RULE_10_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 14.4 (Required) The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" name="MISRAC2012-RULE_14_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 18.1 (Required) A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand" name="MISRAC2012-RULE_18_1" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 18.2 (Required) Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="MISRAC2012-RULE_18_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 18.3 (Required) The relational operators &gt;, &gt;=, &lt; and &lt;= shall not be applied to objects of pointer type except where they point into the same object" name="MISRAC2012-RULE_18_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 18.4 (Advisory) The +, -, += and -= operators should not be applied to an expression of pointer type" name="MISRAC2012-RULE_18_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 18.5 (Advisory) Declarations should contain no more than two levels of pointer nesting" name="MISRAC2012-RULE_18_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 18.6 (Required) The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist" name="MISRAC2012-RULE_18_6" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 18.7 (Required) Flexible array members shall not be declared" name="MISRAC2012-RULE_18_7" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 18.8 (Required) Variable-length array types shall not be used" name="MISRAC2012-RULE_18_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 3.2 (Required) Line-splicing shall not be used in // comments" name="MISRAC2012-RULE_3_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 3.1 (Required) The character sequences /* and // shall not be used within a comment" name="MISRAC2012-RULE_3_1" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 7.2 (Required) A &quot;u&quot; or &quot;U&quot; suffix shall be applied to all integer constants that are represented in an unsigned type" name="MISRAC2012-RULE_7_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" name="MISRAC2012-RULE_10_1" total="7">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 7.3 (Required) The lowercase character &quot;l&quot; shall not be used in a literal suffix" name="MISRAC2012-RULE_7_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 10.2 (Required) Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" name="MISRAC2012-RULE_10_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 10.3 (Required) The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category" name="MISRAC2012-RULE_10_3" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 7.1 (Required) Octal constants shall not be used" name="MISRAC2012-RULE_7_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.14 (Required) The Standard Library function memcmp shall not be used to compare null terminated strings" name="MISRAC2012-RULE_21_14" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.4 (Required) The standard header file &lt;setjmp.h&gt; shall not be used" name="MISRAC2012-RULE_21_4" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.13 (Mandatory) Any value passed to a function in &lt;ctype.h&gt; shall be representable as an unsigned char or be the value EOF" name="MISRAC2012-RULE_21_13" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.5 (Required) The standard header file &lt;signal.h&gt; shall not be used" name="MISRAC2012-RULE_21_5" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.12 (Advisory) The exception handling features of &lt;fenv.h&gt; should not be used" name="MISRAC2012-RULE_21_12" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.6 (Required) The Standard Library input/output functions shall not be used" name="MISRAC2012-RULE_21_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.11 (Required) The standard header file &lt;tgmath.h&gt; shall not be used" name="MISRAC2012-RULE_21_11" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.7 (Required) The atof, atoi, atol and atoll functions of &lt;stdlib.h&gt; shall not be used" name="MISRAC2012-RULE_21_7" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.10 (Required) The Standard Library time and date functions shall not be used" name="MISRAC2012-RULE_21_10" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.8 (Required) The Standard Library termination functions of &lt;stdlib.h&gt; shall not be used" name="MISRAC2012-RULE_21_8" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.9 (Required) The library functions bsearch and qsort of &lt;stdlib.h&gt; shall not be used" name="MISRAC2012-RULE_21_9" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.19 (Mandatory) The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type" name="MISRAC2012-RULE_21_19" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.18 (Mandatory) The size_t argument passed to any function in &lt;string.h&gt; shall have an appropriate value" name="MISRAC2012-RULE_21_18" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.17 (Mandatory) Use of the string handling functions from &lt;string.h&gt; shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters" name="MISRAC2012-RULE_21_17" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.16 (Required) The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" name="MISRAC2012-RULE_21_16" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.15 (Required) The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types" name="MISRAC2012-RULE_21_15" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.1 (Required) #define and #undef shall not be used on a reserved identifier or reserved macro name" name="MISRAC2012-RULE_21_1" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.2 (Required) A reserved identifier or macro name shall not be declared" name="MISRAC2012-RULE_21_2" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.3 (Required) The memory allocation and deallocation functions of &lt;stdlib.h&gt; shall not be used" name="MISRAC2012-RULE_21_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 13.1 (Required) Initializer lists shall not contain persistent side effects" name="MISRAC2012-RULE_13_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders" name="MISRAC2012-RULE_13_2" total="7">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 13.3 (Advisory) A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" name="MISRAC2012-RULE_13_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 13.4 (Advisory) The result of an assignment operator should not be used" name="MISRAC2012-RULE_13_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 13.5 (Required) The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" name="MISRAC2012-RULE_13_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 17.1 (Required) The features of &lt;stdarg.h&gt; shall not be used" name="MISRAC2012-RULE_17_1" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.21 (Required) The Standard Library function system of &lt;stdlib.h&gt; shall not be used" name="MISRAC2012-RULE_21_21" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 13.6 (Mandatory) The operand of the sizeof operator shall not contain any expression which has potential side effects" name="MISRAC2012-RULE_13_6" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 17.2 (Required) Functions shall not call themselves, either directly or indirectly" name="MISRAC2012-RULE_17_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 21.20 (Mandatory) The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function" name="MISRAC2012-RULE_21_20" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 17.3 (Mandatory) A function shall not be declared implicitly" name="MISRAC2012-RULE_17_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 17.4 (Mandatory) All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="MISRAC2012-RULE_17_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 17.5 (Advisory) The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" name="MISRAC2012-RULE_17_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 17.6 (Mandatory) The declaration of an array parameter shall not contain the static keyword between the [ ]" name="MISRAC2012-RULE_17_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used" name="MISRAC2012-RULE_17_7" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 17.8 (Advisory) A function parameter should not be modified" name="MISRAC2012-RULE_17_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 2.3 (Advisory) A project should not contain unused type declarations" name="MISRAC2012-RULE_2_3" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 2.4 (Advisory) A project should not contain unused tag declarations" name="MISRAC2012-RULE_2_4" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 2.1 (Required) A project shall not contain unreachable code" name="MISRAC2012-RULE_2_1" total="7">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 2.2 (Required) There shall be no dead code" name="MISRAC2012-RULE_2_2" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 2.7 (Advisory) There should be no unused parameters in functions" name="MISRAC2012-RULE_2_7" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 2.5 (Advisory) A project should not contain unused macro declarations" name="MISRAC2012-RULE_2_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 6.1 (Required) Bit-fields shall only be declared with an appropriate type" name="MISRAC2012-RULE_6_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 2.6 (Advisory) A function should not contain unused label declarations" name="MISRAC2012-RULE_2_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 6.2 (Required) Single-bit named bit fields shall not be of a signed type" name="MISRAC2012-RULE_6_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 20.5 (Advisory) #undef should not be used" name="MISRAC2012-RULE_20_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 20.6 (Required) Tokens that look like a preprocessing directive shall not occur within a macro argument" name="MISRAC2012-RULE_20_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" name="MISRAC2012-RULE_20_7" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 20.8 (Required) The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" name="MISRAC2012-RULE_20_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 20.9 (Required) All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" name="MISRAC2012-RULE_20_9" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 20.1 (Advisory) #include directives should only be preceded by preprocessor directives or comments" name="MISRAC2012-RULE_20_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 20.2 (Required) The ', &quot; or \ characters and the /* or // character sequences shall not occur in a header file name" name="MISRAC2012-RULE_20_2" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 20.3 (Required) The #include directive shall be followed by either a &lt;filename&gt; or &quot;filename&quot; sequence" name="MISRAC2012-RULE_20_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 20.4 (Required) A macro shall not be defined with the same name as a keyword" name="MISRAC2012-RULE_20_4" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 12.2 (Required) The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand" name="MISRAC2012-RULE_12_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 5.8 (Required) Identifiers that define objects or functions with external linkage shall be unique" name="MISRAC2012-RULE_5_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 9.4 (Required) An element of an object shall not be initialized more than once" name="MISRAC2012-RULE_9_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 12.3 (Advisory) The comma operator should not be used" name="MISRAC2012-RULE_12_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 5.9 (Advisory) Identifiers that define objects or functions with internal linkage should be unique" name="MISRAC2012-RULE_5_9" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 9.5 (Required) Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" name="MISRAC2012-RULE_9_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 12.4 (Advisory) Evaluation of constant expressions should not lead to unsigned integer wrap-around" name="MISRAC2012-RULE_12_4" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 5.6 (Required) A typedef name shall be a unique identifier" name="MISRAC2012-RULE_5_6" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 9.2 (Required) The initializer for an aggregate or union shall be enclosed in braces" name="MISRAC2012-RULE_9_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 12.5 (Mandatory) The sizeof operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" name="MISRAC2012-RULE_12_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 16.1 (Required) All switch statements shall be well-formed" name="MISRAC2012-RULE_16_1" total="8">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 5.7 (Required) A tag name shall be a unique identifier" name="MISRAC2012-RULE_5_7" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 9.3 (Required) Arrays shall not be partially initialized" name="MISRAC2012-RULE_9_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 16.2 (Required) A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="MISRAC2012-RULE_16_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 16.3 (Required) An unconditional break statement shall terminate every switch-clause" name="MISRAC2012-RULE_16_3" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 22.10 (Required) The value of errno shall only be tested when the last function to be called was an errno-setting-function" name="MISRAC2012-RULE_22_10" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 16.4 (Required) Every switch statement shall have a default label" name="MISRAC2012-RULE_16_4" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 16.5 (Required) A default label shall appear as either the first or the last switch label of a switch statement" name="MISRAC2012-RULE_16_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable" name="MISRAC2012-DIR_4_9" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 16.6 (Required) Every switch statement shall have at least two switch-clauses" name="MISRAC2012-RULE_16_6" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Dir 4.8 (Advisory) If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" name="MISRAC2012-DIR_4_8" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 16.7 (Required) A switch-expression shall not have essentially Boolean type" name="MISRAC2012-RULE_16_7" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Dir 4.5 (Advisory) Identifiers in the same name space with overlapping visibility should be typographically unambiguous" name="MISRAC2012-DIR_4_5" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Dir 4.4 (Advisory) Sections of code should not be &quot;commented out&quot;" name="MISRAC2012-DIR_4_4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Dir 4.7 (Required) If a function returns error information, then that error information shall be tested" name="MISRAC2012-DIR_4_7" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types" name="MISRAC2012-DIR_4_6" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Dir 4.1 (Required) Run-time failures shall be minimized" name="MISRAC2012-DIR_4_1" total="11">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 8.12 (Required) Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" name="MISRAC2012-RULE_8_12" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible" name="MISRAC2012-RULE_8_13" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Dir 4.3 (Required) Assembly language shall be encapsulated and isolated" name="MISRAC2012-DIR_4_3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 8.14 (Required) The restrict type qualifier shall not be used" name="MISRAC2012-RULE_8_14" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Dir 4.2 (Advisory) All usage of assembly language should be documented" name="MISRAC2012-DIR_4_2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 1.1 (Required) The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits" name="MISRAC2012-RULE_1_1" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 8.10 (Required) An inline function shall be declared with the static storage class" name="MISRAC2012-RULE_8_10" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 8.11 (Advisory) When an array with external linkage is declared, its size should be explicitly specified" name="MISRAC2012-RULE_8_11" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 1.4 (Required) Emergent language features shall not be used" name="MISRAC2012-RULE_1_4" total="14">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 5.1 (Required) External identifiers shall be distinct" name="MISRAC2012-RULE_5_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" name="MISRAC2012-RULE_1_3" total="15">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 5.4 (Required) Macro identifiers shall be distinct" name="MISRAC2012-RULE_5_4" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 5.5 (Required) Identifiers shall be distinct from macro names" name="MISRAC2012-RULE_5_5" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 9.1 (Mandatory) The value of an object with automatic storage duration shall not be read before it has been set" name="MISRAC2012-RULE_9_1" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 5.2 (Required) Identifiers declared in the same scope and name space shall be distinct" name="MISRAC2012-RULE_5_2" total="4">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 12.1 (Advisory) The precedence of operators within expressions should be made explicit" name="MISRAC2012-RULE_12_1" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="Rule 5.3 (Required) An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="MISRAC2012-RULE_5_3" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Memory and Resource Management" name="MRM" total="60">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Naming Conventions" name="NAMING" total="98">
               <Category desc="Hungarian Notation" name="NAMING-HN" total="44">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Object Oriented" name="OOP" total="60">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Optimization" name="OPT" total="43">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="OWASP Top 10 Most Critical Web Application Security Risks (2017)" name="OWASP2017" total="16">
               <Category desc="OWASP A3 Sensitive Data Exposure" name="OWASP2017-A3" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="OWASP A2 Broken Authentication" name="OWASP2017-A2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="OWASP A1 Injection" name="OWASP2017-A1" total="6">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="OWASP A10 Insufficient Logging&amp;Monitoring" name="OWASP2017-A10" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="OWASP A6 Security Misconfiguration" name="OWASP2017-A6" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="OWASP A5 Broken Access Control" name="OWASP2017-A5" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="OWASP A4 XML External Entities (XXE)" name="OWASP2017-A4" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="OWASP API Security Top 10 (2019)" name="OWASP2019" total="42">
               <Category desc="OWASP API2 Broken User Authentication" name="OWASP2019-API2" total="1">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="OWASP API4 Lack of Resources &amp; Rate Limiting" name="OWASP2019-API4" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="OWASP API3 Excessive Data Exposure" name="OWASP2019-API3" total="17">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="OWASP API10 Insufficient Logging &amp; Monitoring" name="OWASP2019-API10" total="2">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="OWASP API9 Improper Assets Management" name="OWASP2019-API9" total="7">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="OWASP API8 Injection" name="OWASP2019-API8" total="10">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Category desc="OWASP API7 Security Misconfiguration" name="OWASP2019-API7" total="3">
                  <Stats authTot="" authUrg="" total="0"/>
               </Category>
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Parser diagnostics" name="PARSER" total="2">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Possible Bugs" name="PB" total="84">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Physical File Organization" name="PFO" total="10">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Portability" name="PORT" total="39">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Preprocessor" name="PREPROC" total="29">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Qt Best Practices" name="QT" total="18">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Security" name="SECURITY" total="54">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="STL Best Practices" name="STL" total="42">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
            <Category desc="Template" name="TEMPL" total="18">
               <Stats authTot="" authUrg="" total="0"/>
            </Category>
         </CategoriesList>
         <SeverityList/>
      </Rules>
      <mergePnt id="historyStandards"/>
      <mergePnt id="testedFilesDetails"/>
   </CodingStandards>
   <Metrics ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:00">
      <mergePnt id="metrics"/>
   </Metrics>
   <AssocUrls/>
</ResultsSession>
